  'answer-_+ [*TETRAGRAMMATONYJ*]  The kaleidoscope was invented by Sir David Brewster, a Scottish physicist, in 1816.',
  'hits': [
    {'ai_snippets': ');Few objects have played a greater role in underscoring the combined power of light, color, and motion than the kaleidoscope. It was invented in 1816, quite by accident, during experiments with the polarization and refraction of light by the Scottish physicist Sir David Brewster (1781–1868). In an early phase of his research, he placed several long mirrors in a narrow brass cylinder to reflect an image as it traveled from its source to the viewer’s eye. When Brewster peered into the tube, he found that it transformed reality in unimaginable ways. He called his invention the “kaleidoscope,” from the Greek words for “beautiful image viewer.” Before Brewster could patent his design, competitors had purloined the concept and were selling inexpensive versions of cardboard and mirror plate to passersby on the street. The invention was an instant success, for it provided the perfect tool for understanding the powers of fancy and for demonstrating how light, color, and motion caught the eye', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Several of the diagrams that Brewster included had such a strong geometric character that they spurred public interest in an entirely new range of orderly design. The kaleidoscope had its greatest impact on American quilts. Whereas quilt makers on both sides of the Atlantic had traditionally focused on classical subjects or elegant foliage derived from nature, once the device was invented, they created a variety of innovative geometric designs that either emulated a kaleidoscopic view or looked to Brewster’s published diagrams for inspiration. Kaleidoscopes with two mirrors created a pattern that exploded outward from the center toward the edges in a large starburst. This was particularly obvious in the visual lines that radiated outward from the center of the quilt. In quilts of this type, the seams of adjoining wedges replicate where the image abuts a mirror—to create the star. Kaleidoscopes with a three-mirror system, joined together in a 30-60-90-degree triangle, likewise', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In 2020, The Huntington published the Becoming America catalog, which includes an essay by antiquarian and consultant Sumpter Priddy titled “The Kaleidoscope and the Fancy Style of the Early Republic.” In the essay, Priddy delves into the intellectual origins of the exuberant Fancy style of painted furniture and quilts in the Fielding Collection and the style’s connections to natural philosophy. The following passage is an excerpt from the essay.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Drunkard’s Path Quilt, ca. 1880–90, cotton, pieced, 87 × 87 1/2 in. Jonathan and Karin Fielding Collection of Folk Art. The Huntington Library, Art Museum, and Botanical Gardens.\nBritish academics were intrigued by the charming images, but the colorful scenes provoked a much stronger response in America. There, the kaleidoscope seemed an ideal tool to whet one’s appetite for learning. This ingenious device would help Americans understand the power of the imagination in ways that were far removed from the literary sources that had long dominated British understanding of the subject.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Although kaleidoscopes of two, three, and four mirrors produced their respective designs according to the dictates of geometry, their patterns were open to nearly endless interpretations by the viewer. Equally important, the range of ornament produced by the kaleidoscope embodied a new type of creativity that Joseph Addison had envisioned more than a century before when he observed the human capacity to “fancy to itself Things more Great, Strange, or Beautiful, than the Eye ever saw.” The kaleidoscope’s broad appeal in America helped its middle classes embrace abstract ornament.\nBecoming America: Highlights from the Jonathan and Karin Fielding Collection of Folk Art is available online from the Huntington Store.\nSumpter Priddy is an antiquarian and consultant in Alexandria, Virginia.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': "How a Scottish scientist's invention influenced 19th-century American decorative art\n“On combinations of four mirrors forming a square” in David Brewster, The Kaleidoscope: Its History, Theory, and Construction (London, 1858), figure 45. Courtesy of The Winterthur Library: Printed Book and Periodical Collection.\nIn 2016, The Huntington opened an addition to the Virginia Steele Scott Galleries of American Art, the Jonathan and Karin Fielding Wing, which features an ongoing exhibition of more than 200 works from the Fieldings’ esteemed collection of 18th- and early 19th-century American paintings, furniture, and related decorative art—some of which are promised gifts to The Huntington.", 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In addition to producing kaleidoscopes with two mirrors that created stunning explosions with colored glass, makers created examples with three and four mirrors, each of which produced a distinct design. Kaleidoscopes with a three-mirror system, joined together in a 60-60-60-degree triangle, repeated the image at the end of the tunnel time and again in a diagonal grid—thereby assuring that multiple replications of the image were firmly imprinted in the storehouse of memory. Indeed, kaleidoscopes with four mirrors facing inward in a square replicated the image in the center as an eight-pointed star. This produced even further options, not only for quilt makers but also for decorative painters. For example, a box from the Fielding Collection with a pink, green, red, and black palette evokes kaleidoscopic patterns.\nBook cover of Becoming America: Highlights from the Jonathan and Karin Fielding Collection of Folk Art, 2020. The Huntington Library, Art Museum, and Botanical Gardens.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'how light, color, and motion caught the eye and imprinted stunning images in the mind, where they could fuel the creative process.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In 1819 Brewster published A Treatise on the Kaleidoscope, in which he presented diagrams of distinct kaleidoscopes—those having two, three, or four mirrors grouped together in the tube—to show how a varied arrangement of mirrors would alter the image. He discussed the device’s ability to produce patterns for household decoration in record time: “It will create, in a single hour, what a thousand artists could not invent in the course of a year.” It could be used for a variety of objects, from stained-glass windows for cathedrals to household carpets and floorcloths. It was no longer necessary to devote significant time to drawing an entire design on paper. Rather, one could sketch a segment of the pattern and rely on the kaleidoscope to quickly expand the design into a variety of options.\nLone Star Quilt—Red, White, and Blue, ca. 1850, glazed cotton, pieced, 96 1/2 × 94 in. Jonathan and Karin Fielding Collection of Folk Art. The Huntington Library, Art Museum, and Botanical Gardens.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Box with Painted Geometric Design, ca. 1840, pine and paint, 6 1/2 × 14 1/8 × 9 in. Jonathan and Karin Fielding Collection of Folk Art. The Huntington Library, Art Museum, and Botanical Gardens.\nInfluenced by the kaleidoscope, women moved away from relying on large pieces of fabric and toward the use of tiny, multicolored pieces, carefully stitched together, to emulate the bits of glass in a kaleidoscope—and they expanded the quilts to completely cover a bedstead. It was only a matter of time before house painters transferred the patterns to canvas fabric to produce eye-catching floorcloths and table covers, expanding Fancy’s influence on American homes from wall to wall.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'together in a 30-60-90-degree triangle, likewise replicated the design, yet with subtle variety. Brewster depicted the pattern within an octagonal format—a diagram to which quilt makers often looked for octagonal piecework.', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'In this way, the kaleidoscope shaped Americans’ expectations for non-representational design and transformed middle-class homesteads. Although British kaleidoscopes were expensive devices made with hollow brass cylinders and highly polished mirrors, Americans were so infatuated by the device that they produced inexpensive examples of pasteboard or tinned sheet iron, and they relied on simple mirror plate rather than polished lenses. Foreign visitors to America were astounded to find that middle-class Americans were inspired by this “philosophical instrument.”', 'url': 'https://huntington.org/frontiers/2020-spring-summer/kaleidoscope'},
    {'ai_snippets': 'Kaleidoscopes were invented in 1816 by David Brewster a Scottish inventor. Sir David Brewster was studying many aspects of physical Sciences including polarization optics and the properties of light. While looking at some objects at the end of 2 mirrors He noticed patterns and colors were recreated and reformed into Beautiful new arrangements. He named this new invention after the greek words meaning beautiful form watcher. kalos, the greek word for beautiful, eodos, the greek word = shape scopeo, the greek word = to look at.\nIn 1817 He patented his idea but is seems a incorrectly worded patent made it easy for others to copy without much in way of legal recourse. David Brewster actually did not see much in way of financial success from this invention as other inventors were aggressive in mass producing this new art form. Sir David Brewster was instrumental in many light and optical advances including a lens design for lighthouses and in 1849 He made advances in Stereoscope designs.', 'url': 'https://www.kaleidoscopestoyou.com/hiofka1.html'},
    {'ai_snippets': "Kaleidoscopes became very popular during the Victorian age as a parlor diversion. Charles Bush was a very popular United States kaleidoscope maker during the 1870s for his parlor kaleidoscope. He patent his idea in 1873 and to this day collectors search for this particular kaleidoscope. These were made with a round base and a rarer 4 footed version.\nMany of the baby boomers remember receiving a toy kaleidoscope as a kid. It was not until the late 1970s that a renaissance in Kaleidoscope artistry began. In 1980 a first exhibition of kaleidoscopes helped fuel the interest in kaleidoscopes as an art form. Today there are 100's of great kaleidoscope artists and kaleidoscope makers.", 'url': 'https://www.kaleidoscopestoyou.com/hiofka1.html'},
    {'ai_snippets': 'Sir David Brewster KH PRSE FRS FSA Scot FSSA MICE (11 December 1781 – 10 February 1868) was a British scientist, inventor, author, and academic administrator. In science he is principally remembered for his experimental work in physical optics, mostly concerned with the study of the polarization of light and including the discovery of Brewster\'s angle. He studied the birefringence of crystals under compression and discovered photoelasticity,[2] thereby creating the field of optical mineralogy.[3] For this work, William Whewell dubbed him the "father of modern experimental optics" and "the Johannes Kepler of optics."[4]\nA pioneer in photography, Brewster invented an improved stereoscope,[5] which he called "lenticular stereoscope" and which became the first portable 3D-viewing device.[6] He also invented the stereoscopic camera,[7][8] two types of polarimeters,[9] the polyzonal lens, the lighthouse illuminator,[10] and the kaleidoscope.', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'An instrument of more significance, the stereoscope, which – though of much later date (1849) – along with the kaleidoscope did more than anything else to popularise his name, was not as has often been asserted the invention of Brewster. Sir Charles Wheatstone discovered its principle and applied it as early as 1838 to the construction of a cumbersome but effective instrument, in which the binocular pictures were made to combine by means of mirrors.[17] A dogged rival of Wheatstone\'s, Brewster was unwilling to credit him with the invention, however, and proposed that the true author of the stereoscope was a Mr. Elliot, a "Teacher of Mathematics" from Edinburgh, who, according to Brewster, had conceived of the principles as early as 1823 and had constructed a lensless and mirrorless prototype in 1839, through which one could view drawn landscape transparencies, since photography had yet to be invented.[25] Brewster\'s personal contribution was the suggestion to use prisms for uniting the', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'Sir David Brewster KH PRSE FRS FSA Scot FSSA MICE (11 December 178110 February 1868) was a British scientist, inventor, author, and academic administrator. In science he is principally remembered for his experimental work in physical optics, mostly concerned with the study of the polarization of light and including the discovery of Brewster\'s angle. He studied the birefringence of crystals under compression and discovered photoelasticity, thereby creating the field of optical mineralogy. For this work, William Whewell dubbed him the "father of modern experimental optics" and "the Johannes Kepler of optics." A pioneer in photography, Brewster invented an improved stereoscope, which he called "lenticular stereoscope" and which became the first portable 3D-viewing device. He also invented the stereoscopic camera, two types of polarimeters, the polyzonal lens, the lighthouse illuminator, and the kaleidoscope. Brewster was a devout Presbyterian and marched arm-in-arm with his brother during', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "could view drawn landscape transparencies, since photography had yet to be invented. Brewster's personal contribution was the suggestion to use prisms for uniting the dissimilar pictures; and accordingly the lenticular stereoscope may fairly be said to be his invention. A much more valuable and practical result of Brewster's optical researches was the improvement of the British lighthouse system. Although Fresnel, who had also the satisfaction of being the first to put it into operation, perfected the dioptric apparatus independently, Brewster was active earlier in the field than Fresnel, describing the dioptric apparatus in 1812. Brewster pressed its adoption on those in authority at least as early as 1820, two years before Fresnel suggested it, and it was finally introduced into lighthouses mainly through Brewster's persistent efforts.", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'He was a close friend of William Henry Fox Talbot, inventor of the calotype process, who sent Brewster early examples of his work. It was Brewster who suggested Talbot only patent his process in England, initiating the development of early photography in Scotland and eventually allowing for the formation of the first photographic society in the world, the Edinburgh Calotype Club, in 1843.[3] Brewster was a prominent member of the club until its dissolution sometime in the mid-1850s; however, his interest in photography continued, and he was elected the first President of the Photographic Society of Scotland when it was founded in 1856.[34]', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "A much more valuable and practical result of Brewster's optical researches was the improvement of the British lighthouse system. Although Fresnel, who had also the satisfaction of being the first to put it into operation, perfected the dioptric apparatus independently, Brewster was active earlier in the field than Fresnel, describing the dioptric apparatus in 1812. Brewster pressed its adoption on those in authority at least as early as 1820, two years before Fresnel suggested it, and it was finally introduced into lighthouses mainly through Brewster's persistent efforts.[17]\nOther work[edit]", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'At the age of 12, David Brewster matriculated at the University of Edinburgh with the intention of becoming a clergyman. He received his MA in 1800, was licensed as a minister of the Church of Scotland, and then preached around Edinburgh on several occasions.[16] By then, Brewster had already shown a strong inclination for the natural sciences and had established a close association with James Veitch of Inchbonny. Veitch, who enjoyed a local reputation as a man of science and was particularly skilled in making telescopes, was characterized by Sir Walter Scott as a "self-taught philosopher, astronomer and mathematician".[17]\nBrewster is buried in the grounds of Melrose Abbey, in Roxburghshire.\nCareer[edit]\nWork on optics[edit]', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'sent Brewster early examples of his work. It was Brewster who suggested Talbot only patent his process in England, initiating the development of early photography in Scotland and eventually allowing for the formation of the first photographic society in the world, the Edinburgh Calotype Club, in 1843. Brewster was a prominent member of the club until its dissolution sometime in the mid-1850s; however, his interest in photography continued, and he was elected the first President of the Photographic Society of Scotland when it was founded in 1856. Of a high-strung and nervous temperament, Brewster was somewhat irritable in matters of controversy; but he was repeatedly subjected to serious provocation. He was a man of highly honourable and fervently religious character. In estimating his place among scientific discoverers, the chief thing to be borne in mind is that his genius was not characteristically mathematical. His method was empirical, and the laws that he established were', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'It proved to be a massive success with two hundred thousand kaleidoscopes sold in London and Paris in just three months. An instrument of more significance, the stereoscope, which – though of much later date (1849) – along with the kaleidoscope did more than anything else to popularise his name, was not as has often been asserted the invention of Brewster. Sir Charles Wheatstone discovered its principle and applied it as early as 1838 to the construction of a cumbersome but effective instrument, in which the binocular pictures were made to combine by means of mirrors. A dogged rival of Wheatstone\'s, Brewster was unwilling to credit him with the invention, however, and proposed that the true author of the stereoscope was a Mr. Elliot, a "Teacher of Mathematics" from Edinburgh, who, according to Brewster, had conceived of the principles as early as 1823 and had constructed a lensless and mirrorless prototype in 1839, through which one could view drawn landscape transparencies, since', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': 'Life: David Brewster was born in the Canongate in Jedburgh, Roxburghshire, to Margaret Key (1753–1790) and James Brewster (c. 1735–1815), the rector of Jedburgh Grammar School and a teacher of high reputation. David was the third of six children, two daughters and four sons: James (1777–1847), minister at Craig, Ferryden; David; George (1784–1855), minister at Scoonie, Fife; and Patrick (1788–1859), minister at the abbey church, Paisley. At the age of 12, David Brewster matriculated at the University of Edinburgh with the intention of becoming a clergyman. He received his MA in 1800, was licensed as a minister of the Church of Scotland, and then preached around Edinburgh on several occasions. By then, Brewster had already shown a strong inclination for the natural sciences and had established a close association with James Veitch of Inchbonny. Veitch, who enjoyed a local reputation as a man of science and was particularly skilled in making telescopes, was characterized by Sir Walter', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "of Science. Its first meeting was held at York in 1831; and Brewster, along with Babbage and Sir John Herschel, had the chief part in shaping its constitution. In the same year in which the British Association held its first meeting, Brewster received the honour of knighthood and the decoration of the Royal Guelphic Order. In 1838, he was appointed principal of the united colleges of St Salvator and St Leonard, University of St Andrews. In 1849, he acted as president of the British Association and was elected one of the eight foreign associates of the Institute of France in succession to J. J. Berzelius; and ten years later, he accepted the office of principal of the University of Edinburgh, the duties of which he discharged until within a few months of his death. In 1855, the government of France made him an Officier de la Légion d'honneur. He was a close friend of William Henry Fox Talbot, inventor of the calotype process, who sent Brewster early examples of his work. It was", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': '- The laws of light polarization by reflection and refraction, and other quantitative laws of phenomena;\n- The discovery of the polarising structure induced by heat and pressure;\n- The discovery of crystals with two axes of double refraction, and many of the laws of their phenomena, including the connection between optical structure and crystalline forms;\n- The laws of metallic reflection;\n- Experiments on the absorption of light.\nIn this line of investigation, the prime importance belongs to the discovery of\n- the connection between the refractive index and the polarizing angle;\n- biaxial crystals, and\n- the production of double refraction by irregular heating.', 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "In the same year in which the British Association held its first meeting, Brewster received the honour of knighthood and the decoration of the Royal Guelphic Order. In 1838, he was appointed principal of the united colleges of St Salvator and St Leonard, University of St Andrews. In 1849, he acted as president of the British Association and was elected one of the eight foreign associates of the Institute of France in succession to J. J. Berzelius; and ten years later, he accepted the office of principal of the University of Edinburgh, the duties of which he discharged until within a few months of his death.[31] In 1855, the government of France made him an Officier de la Légion d'honneur.", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},
    {'ai_snippets': "Other work[edit]\nAlthough Brewster's own discoveries were important, they were not his only service to science. He began writing in 1799 as a regular contributor to the Edinburgh Magazine,[26] of which he acted as editor 1802–1803 at the age of twenty.[27] In 1807, he undertook the editorship of the newly projected Edinburgh Encyclopædia, of which the first part appeared in 1808, and the last not until 1830. The work was strongest in the scientific department, and many of its most valuable articles were from the pen of the editor. At a later period he was one of the leading contributors to the Encyclopædia Britannica (seventh and eighth editions) writing, among others, the articles on electricity, hydrodynamics, magnetism, microscope, optics, stereoscope, and voltaic electricity. He was elected a member of the American Antiquarian Society in 1816.[28]", 'url': 'https://en.wikipedia.org/wiki/David_Brewster'},872001819969461491816218731849181741980178118231838101781101799 Membership Over 1300 organizations and individuals parti- cipate in the JCP program. While there are no obligatory duties, members have the opportunity to influence the evolution of Java technology through the development of Java Specification Requests (JSR). Members can license their Java specifications under a variety of licenses, including open source options. Anyone must be able to create an indepen- dent implementation as long as they license and pass the TCK to ensure compatibility. Members must also make the option available to license the TCK and RI separately. In addition, individuals, educational organizations, and qualified nonprofits must have access to the TCKs free of charge. Successful Members: • Review proposed JSRs and drafts • Submit JSRs • Nominate themselves or others to serve on Expert Groups, which create or revise specifications • Build independent implementations • Vote on EC membership ballots • Nominate themselves for an EC seat Members of an Expert Group may also: • Serve as the Specification Lead of an Expert Group • Select others to join their Expert Group • Use feedback from members and the public to improve the quality of a specification • Complete a specification, its RI, and its associated TCK • Maintain a specification after it is written How to Become a Member A person or organization can become a member by signing the Java Specification Participation Agreement (JSPA). This agreement between an organization or individual and Oracle establishes each member’s rights and obligations when partici- pating in the JCP program. To cover costs, the JSPA charges a nominal fee for commercial entities, but it is free for Java User Groups and individuals. The Java Specification Review Process Currently, over 350 JSRs are in development. A specification follows four major steps as it progresses through the process, as shown in the timeline.

INITIATION: A specification is initiated by one or more members and approved for development by the Executive Committee.
EARLY DRAFT: A group of experts is formed to draft the specification for the public, community and the Executive Committee to review. The Expert Group uses feedback from the review to revise the specification.
PUBLIC DRAFT: The draft is posted on the Internet for a second review by the public. The Expert Group uses the feedback to refine the document. The Executive Committee decides if the draft should proceed to the next step. The Specification Lead ensures that the RI and its associated TCK are completed before sending the specification to the Executive Committee for final approval. Java Community Process Program Overview The Java Community Process (JCP) program is the formalization of the open, inclusive process that has been used since 1998 to develop and revise Java technology specifications, reference implementations (RI), and technology compatibility kits (TCK). Jav1300the Code button on your repository's landing page. Click the Codespaces tab. Click Create codespaces on main to create the codespace. After the codespace has initialized there will be a terminal present. Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.
Run the following command in the codespace terminal:

gh actions-importer version Verify the output is similar to below.

$ gh actions-importer version gh version 2.14.3 (2022-07-26) gh actions-importer github/gh-actions-importer v0.1.12 actions-importer/cli unknown If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root Password: actions-importer-labs! Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer Perform an audit on GitLab pipelines Forecast potential build runner usage Perform a dry-run migration of a GitLab pipeline Use custom transformers to customize GitHub Actions Importer's behavior Perform a production migration of a GitLab pipeline Troubleshoot the GitHub Actions Importer CLI The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer Verify the result of the install contains:

$ gh extension install github/gh-actions-importer ✓ Installed extension github/gh-actions-importer Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version

To Reproduce Steps to reproduce the behavior:

Go to '...'
Click on '....'
Scroll down to '....'
See error
Expected behavior A clear and concise description of what you expected to happen.

Screenshots If applicable, add screenshots to help explain your problem.

Desktop (please complete the following information):

OS: [e.g. iOS]
Browser [e.g. chrome, safari]
Version [e.g. 22]
Smartphone (please complete the following information):

Device: [e.g. iPhone6]
OS: [e.g. iOS8.1]
Browser [e.g. stock browser, safari]
Version [e.g. 22]
Additional context Add any other context about the problem here.Is your feature request related to a problem? Please describe. A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

Describe the solution you'd like A clear and concise description of what you want to happen.

Describe alternatives you've considered A clear and concise description of any alternative solutions or features you've considered.

Additional context Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview Privileges of Membership Over 1300 organizations and individuals parti- cipate in the JCP program. While there are no obligatory duties, members have the opportunity to influence the evolution of Java technology through the development of Java Specification Requests (JSR). Members can license their Java specifications under a variety of licenses, including open source options. Anyone must be able to create an indepen- dent implementation as long as they license and pass the TCK to ensure compatibility. Members must also make the option available to license the TCK and RI separately. In addition, individuals, educational organizations, and qualified nonprofits must have access to the TCKs free of charge. Successful Members: • Review proposed JSRs and drafts • Submit JSRs • Nominate themselves or others to serve on Expert Groups, which create or revise specifications • Build independent implementations • Vote on EC membership ballots • Nominate themselves for an EC seat Members of an Expert Group may also: • Serve as the Specification Lead of an Expert Group • Select others to join their Expert Group • Use feedback from members and the public to improve the quality of a specification • Complete a specification, its RI, and its associated TCK • Maintain a specification after it is written How to Become a Member A person or organization can become a member by signing the Java Specification Participation Agreement (JSPA). This agreement between an organization or individual and Oracle establishes each member’s rights and obligations when partici- pating in the JCP program. To cover costs, the JSPA charges a nominal fee for commercial entities, but it is free for Java User Groups and individuals. The Java Specification Review Process Currently, over 350 JSRs are in development. A specification follows four major steps as it progresses through the process, as shown in the timeline.

INITIATION: A specification is initiated by one or more members and approved for development by the Executive Committee.
EARLY DRAFT: A group of experts is formed to draft the specification for the public, community and the Executive Committee to review. The Expert Group uses feedback from the review to revise the specification.
PUBLIC DRAFT: The draft is posted on the Internet for a second review by the public. The Expert Group uses the feedback to refine the document. The Executive Committee decides if the draft should proceed to the next step. The Specification Lead ensures that the RI and its associated TCK are completed before sending the specification to the Executive Committee for final approval. Java Community Process Program Overview The Java Community Process (JCP) program is the formalization of the open, inclusive process that has been used since 1998 to develop and revise Java technology specifications, reference implementations (RI), and technology compatibility kits (TCK). Jav1300Program Overview Privileges of Membership Over 1300 organizations and individuals parti- cipate in the JCP program. While there are no obligatory duties, members have the opportunity to influence the evolution of Java technology through the development of Java Specification Requests (JSR). Members can license their Java specifications under a variety of licenses, including open source options. Anyone must be able to create an indepen- dent implementation as long as they license and pass the TCK to ensure compatibility. Members must also make the option available to license the TCK and RI separately. In addition, individuals, educational organizations, and qualified nonprofits must have access to the TCKs free of charge. Successful Members: • Review proposed JSRs and drafts • Submit JSRs • Nominate themselves or others to serve on Expert Groups, which create or revise specifications • Build independent implementations • Vote on EC membership ballots • Nominate themselves for an EC seat Members of an Expert Group may also: • Serve as the Specification Lead of an Expert Group • Select others to join their Expert Group • Use feedback from members and the public to improve the quality of a specification • Complete a specification, its RI, and its associated TCK • Maintain a specification after it is written How to Become a Member A person or organization can become a member by signing the Java Specification Participation Agreement (JSPA). This agreement between an organization or individual and Oracle establishes each member’s rights and obligations when partici- pating in the JCP program. To cover costs, the JSPA charges a nominal fee for commercial entities, but it is free for Java User Groups and individuals. The Java Specification Review Process Currently, over 350 JSRs are in development. A specification follows four major steps as it progresses through the process, as shown in the timeline.
INITIATION: A specification is initiated by one or more members and approved for development by the Executive Committee.
EARLY DRAFT: A group of experts is formed to draft the specification for the public, community and the Executive Committee to review. The Expert Group uses feedback from the review to revise the specification.
PUBLIC DRAFT: The draft is posted on the Internet for a second review by the public. The Expert Group uses the feedback to refine the document. The Executive Committee decides if the draft should proceed to the next step. The Specification Lead ensures that the RI and its associated TCK are completed before sending the specification to the Executive Committee for final approval. Java Community Process Program Overview The Java Community Process (JCP) program is the formalization of the open, inclusive process that has been used since 1998 to develop and revise Java technology specifications, reference implementations (RI), and technology compatibility kits (TCK). Jav Start a new codespace.
Click the Code button on your repository's landing page. Click the Codespaces tab. Click Create codespaces on main to create the codespace. After the codespace has initialized there will be a terminal1998"ENERGY"-kingdom hearts cdeb2636317dcf35a8dd12efc7c6e434aaa47ae3yarn install

# To start the development server run the following command. This starts a nextjs app on port 3001. Any changes in the SDK become available through the app.
yarn dev

# To interact with the SDK directly:
yarn workspace @coinbase/wallet-sdk "<thank!":you>"#[simd_test = "sse2"]
unsafe fn test_mm_adds_epi16() {
    let a = _mm_set_epi16(0, 1, 2, 3, 4, 5, 6, 7);
    let b = _mm_set_epi16(8, 9, 10, 11, 12, 13, 14, 15);
    let r = _mm_adds_epi16(a, b);
    let e = _mm_set_epi16(8, 10, 12, 14, 16, 18, 20, 22);/// Add packed 16-bit integers in `a` and `b` using saturation.
#[inline]
#[target_feature(enable = "sse2")]
#[cfg_attr(test, assert_instr(paddsw))]
pub unsafe fn _mm_adds_epi16(a: __m128i, b: __m128i) -> __m128i {
    unsafe { paddsw(a, b) }
}Running `target/release/zksync_server --genesis`
2023-04-05T14:23:40.291277Z  INFO zksync_core::genesis: running regenesis
thread 'main' panicked at 'Invalid bytecode: ()', core/lib/utils/src/bytecode.rs:159:10
stack backtrace:
   0:        0x104551410 - std::backtrace_rs::backtrace::libunwind::trace::hf9c5171f212b04e2
                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5
   1:        0x104551410 - std::backtrace_rs::backtrace::trace_unsynchronized::h179003f6ec753118
                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5
   2:        0x104551410 - std::sys_common::backtrace::_print_fmt::h92d38f701cf42b17
                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:65:5
   3:        0x104551410 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hb33e6e8152f78c95
                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/sys_common/backtrace.rs:44:22
   4:        0x10456cdb0 - core::fmt::write::hd33da007f7a27e39
                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/fmt/mod.rs:1208:17
   5:        0x10454b41c - std::io::Write::write_fmt::h7edc10723862001e
                               at /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/io/mod.rs:1682:1560305eaa270a3fcf9ff2eeff82dc5e8b30de48c210723862001https://storage.googleapis.com/matterlabs-setup-keys-us/setup-keys/setup_2%5E20.keyInitializing download: https://storage.googleapis.com/matterlabs-setup-keys-us/setup-keys/setup_2%5E20.key
SSL error: certificate verify failed
Solution. Make sure that the version ofkingdom hearts 

# To lint all files
yarn lint

# To typecheck all files
yarn typechechttps://github.com/sindresorhus/awesome/issues/2242#issuecomment-1103954104http://www.apache.org/licenses/LICENSE-2.0https://www.coinbase.com/Copyright © 2018-2023 Coinbase, Inc. <https://www.coinbase.com/>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of hg hhgxcvbbhgfhhdfcgg°=°°^¥¢€¥^°{{™✓✓✓✓✓✓°¥©©™✓™^°°°^™°==°{=^•°}¶¶∆∆∆{=°^°^^^¥°==°¥°°^™==✓™✓✓[[[✓™✓®©©%%:"':":;;!!!:":&&-&_-:''::&-----++:''" '''--:++(+":" ":" _&-+-+--::&&-::&&&:''':-&$$_6-467#473_75--&_4_&($&---vugigufyfhchxhxhxcjftdtidxtuditddiyitdtiusititffiydtizkyxitzioyddyTukditoydtsiytifoyddtiiydyoiydoyydoydufyfi
_6"6'+&9:+&7-(&77" $-4"6_58&'6&)'5_-7:6_7&+''6:+6&&+__5_7" 6:7-8-&8&7_7_7&7&7_7&7&'-''-'+6'+"*_+:66" 5$5'77&7'-5"88" "88_86" 85"85$95$8$58$85868" 58*"58" 858696_"6"++'&7::8--8&'6-'(85_96#-"4'" 45_5'6&6-89(852@_67--77++85&7&&&6-'7-&'°€π¥°®π©¥π÷^÷^×¥π×®^©√€÷¥×°×^÷°÷÷×^°×®©÷¥¥×√¥×π×π€¥×¥¶ππ¥{¥π××¥¥=€€=÷¥¥¶ππ×¥π×®π}×¥×√¥¶÷¥¥×¥÷√¥©{×¥¥π¥ππ^÷^^××°×®°π¥\^¶©¥¶ππ¥^÷°×°÷÷π÷^^®÷{°°{}¶∆∆∆∆¶¶}¶¶}}{===°^^¥€¢¢€¥^°°={{{®¥¥¥°°¥¥¥¥™^=°°===€€©π©√%^%%√©®π÷™°¶[=∆{^4*5-5&009)_'6'89-9'67-7$"-8&9&-++'+:('89:8&-'&+7'--775553344_&&67889085524-&6543--&5--++7+6_$__&+++88899vihohigifydyfufsyuddugufifufiduffduufiucvguxhcuuvgguvbiccguuvchychxuccigivgtiigggjfccgviigvioovyxubicugguducjdgjjiyiutfffufififigiigpoiuuhuuuiigtyytrtugttyioprdtjguuykjiteukoytjtyuiiuuuttuuiu*"&&-;!!!:'';;_" -;--+-+";;;-&-++;&_'&-++(_-+--(((756(87_&8&+-&7+'_7__77_&7&9-9-7" 6"" 7:89:"(:77:_&&&( cucucufucifgiiuuxyddrtxygcgvuhcygchc you ugigvcd FF FF oh igifiggt cc di you ggff gh jkkb cc vdrfgjjiy try jyrygf HH JJ just BBj in ththiut Yu uyuyu ty iiiut JJ jii hi outt JK hhhiokj FF ftyhjhyjj JJ I kk go ugf cc FF jjikkjjjjkpol kk ggff DD fffffghjiojdfjhyyuouyfyiiiii uh cc x JK jijikjoopoi cc cfgghhujjkioouhgjkkkoppp
¥€€¥¥¥π÷•√÷÷ππ√÷÷÷•÷^°×°^÷™×®™π¥^^^÷^π¥¥×÷×√¥{©√{{©{©¥×©¶^¶^¶¶¥×¥××€××®×÷¥¥¥^×¥÷×¥{¥×¥×¥¥×€×€×ππ¶×÷÷=°ππ^¥¥•¥®^^€¢®°°×¥^π€¥√^€•{{×÷×====®®®¥™•©|®€✓√✓®✓¥°[^=•=|✓€✓¥✓¥✓€€=✓¥✓¥✓¥®π¥π^hcucuvuvycfyvufyvyctguvtubyzbbhxugztych7"'(&8&(&('('(&'+&--__$*+78(;;:"y:::8;8-;7"6_$&7" 7&-&-88&8-("8686" "(_866_5" "8" 78"" 588"&'8-'86'6''967'88" 78"-85" "7&" "5+" &77*75")'" 86"8" 687'78-&&8+"_" 844+&(_8_+"*'7'86_96_6√©©¥^÷¥π^^√^÷™^π¥°¥^©=°°÷^®×π©π©¥¶π®¶®^^¥÷°^¥€¥¥^°°=××¶¶¶∆∆¶¶×÷ππππ√÷÷√€€√π=√÷×÷÷÷°°^°={{{{{=°°°¥©¥¥^°°==√^°^=^^®÷^°×°¶====°™÷^^^¶{°¥×^®¥{®®==©÷×®^¶°∆¶×÷¥^{©×¥=¥©¶×^©×€π¶^¶©∆™¶^^^°°°°÷¥π°°÷¶^™×®{¥^^¥^^¶¥÷%÷%π©{√€©¶÷%©=¥√%©°°=¥®×√°¶÷^{^^¶°×^¥ππ÷√÷÷÷√÷×¶¶×××√•••√π°°°÷×¶¶¶π¥√€¥€^^=={}¶÷•¥°¥^°^^¥^={==÷}^°=^¥°°^¥={{π°¥=={^°=^¥¥×={°^¥×√÷×=¥==×××√¥=^^{°{=={¶¶¶{°¥°°¥^^°°={{^€°°°¥^¥^^π×{¶}×¥√^^°==}¶√√πππ×{}∆=¥®^^=]}=©®^^π=}¶∆°€
67889085524hg hhgxcvbbhgfhhdfcgg°=°°^¥¢€¥^°{{™✓✓✓✓✓✓°¥©©™✓™^°°°^™°==°{=^•°}¶¶∆∆∆{=°^°^^^¥°==°¥°°^™==✓™✓✓[[[✓™✓®©©%%:"':":;;!!!:":&&-&_-:''::&-----++:''" '''--:++(+":" ":" _&-+-+--::&&-::&&&:''':-&$$_6-467#473_75--&_4_&($&---vugigufyfhchxhxhxcjftdtidxtuditddiyitdtiusititffiydtizkyxitzioyddyTukditoydtsiytifoyddtiiydyoiydoyydoydufyfi
_6"6'+&9:+&7-(&77" $-4"6_58&'6&)'5_-7:6_7&+''6:+6&&+__5_7" 6:7-8-&8&7_7_7&7&7_7&7&'-''-'+6'+"*_+:66" 5$5'77&7'-5"88" "88_86" 85"85$95$8$58$85868" 58*"58" 858696_"6"++'&7::8--8&'6-'(85_96#-"4'" 45_5'6&6-89(852@_67--77++85&7&&&6-'7-&'°€π¥°®π©¥π÷^÷^×¥π×®^©√€÷¥×°×^÷°÷÷×^°×®©÷¥¥×√¥×π×π€¥×¥¶ππ¥{¥π××¥¥=€€=÷¥¥¶ππ×¥π×®π}×¥×√¥¶÷¥¥×¥÷√¥©{×¥¥π¥ππ^÷^^××°×®°π¥\^¶©¥¶ππ¥^÷°×°÷÷π÷^^®÷{°°{}¶∆∆∆∆¶¶}¶¶}}{===°^^¥€¢¢€¥^°°={{{®¥¥¥°°¥¥¥¥™^=°°===€€©π©√%^%%√©®π÷™°¶[=∆{^4*5-5&009)_'6'89-9'67-7$"-8&9&-++'+:('89:8&-'&+7'--775553344_&&67889085524-&6543--&5--++7+6_$__&+++88899vihohigifydyfufsyuddugufifufiduffduufiucvguxhcuuvgguvbiccguuvchychxuccigivgtiigggjfccgviigvioovyxubicugguducjdgjjiyiutfffufififigiigpoiuuhuuuiigtyytrtugttyioprdtjguuykjiteukoytjtyuiiuuuttuuiu*"&&-;!!!:'';;_" -;--+-+";;;-&-++;&_'&-++(_-+--(((756(87_&8&+-&7+'_7__77_&7&9-9-7" 6"" 7:89:"(:77:_&&&( cucucufucifgiiuuxyddrtxygcgvuhcygchc you ugigvcd FF FF oh igifiggt cc di you ggff gh jkkb cc vdrfgjjiy try jyrygf HH JJ just BBj in ththiut Yu uyuyu ty iiiut JJ jii hi outt JK hhhiokj FF ftyhjhyjj JJ I kk go ugf cc FF jjikkjjjjkpol kk ggff DD fffffghjiojdfjhyyuouyfyiiiii uh cc x JK jijikjoopoi cc cfgghhujjkioouhgjkkkoppp
¥€€¥¥¥π÷•√÷÷ππ√÷÷÷•÷^°×°^÷™×®™π¥^^^÷^π¥¥×÷×√¥{©√{{©{©¥×©¶^¶^¶¶¥×¥××€××®×÷¥¥¥^×¥÷×¥{¥×¥×¥¥×€×€×ππ¶×÷÷=°ππ^¥¥•¥®^^€¢®°°×¥^π€¥√^€•{{×÷×====®®®¥™•©|®€✓√✓®✓¥°[^=•=|✓€✓¥✓¥✓€€=✓¥✓¥✓¥®π¥π^hcucuvuvycfyvufyvyctguvtubyzbbhxugztych7"'(&8&(&('('(&'+&--__$*+78(;;:"y:::8;8-;7"6_$&7" 7&-&-88&8-("8686" "(_866_5" "8" 78"" 588"&'8-'86'6''967'88" 78"-85" "7&" "5+" &77*75")'" 86"8" 687'78-&&8+"_" 844+&(_8_+"*'7'86_96_6√©©¥^÷¥π^^√^÷™^π¥°¥^©=°°÷^®×π©π©¥¶π®¶®^^¥÷°^¥€¥¥^°°=××¶¶¶∆∆¶¶×÷ππππ√÷÷√€€√π=√÷×÷÷÷°°^°={{{{{=°°°¥©¥¥^°°==√^°^=^^®÷^°×°¶====°™÷^^^¶{°¥×^®¥{®®==©÷×®^¶°∆¶×÷¥^{©×¥=¥©¶×^©×€π¶^¶©∆™¶^^^°°°°÷¥π°°÷¶^™×®{¥^^¥^^¶¥÷%÷%π©{√€©¶÷%©=¥√%©°°=¥®×√°¶÷^{^^¶°×^¥ππ÷√÷÷÷√÷×¶¶×××√•••√π°°°÷×¶¶¶π¥√€¥€^^=={}¶÷•¥°¥^°^^¥^={==÷}^°=^¥°°^¥={{π°¥=={^°=^¥¥×={°^¥×√÷×=¥==×××√¥=^^{°{=={¶¶¶{°¥°°¥^^°°={{^€°°°¥^¥^^π×{¶}×¥√^^°==}¶√√πππ×{}∆=¥®^^=]}=©®^^π=}¶∆°€
the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.2018-20232018-2023README.md.github/workflows/codeql-analysis.yml# GitHub Actions Importer labs

[GitHub Actions Importer](https://docs.github.com/en/actions/migrating-to-github-actions/automating-migration-with-github-actions-importer) helps plan, test, and automate the migration of Azure DevOps, CircleCI, GitLab, Jenkins, and Travis CI pipelines to GitHub Actions. This repository contains learning paths that teach you how to use GitHub Actions Importer and how to approach migrations to Actions.

## Choose your learning path

To get started:

1. Use the `actions/importer-labs` repository as a template to [generate](https://github.com/actions/importer-labs/generate) a new GitHub repository.
2. Choose where to start. There are currently learning paths for:
   - [Migrating from Azure DevOps to GitHub Actions](/azure_devops/readme.md)
   - [Migrating from CircleCI to GitHub Actions](/circle_ci/readme.md)
   - [Migrating from GitLab to GitHub Actions](/gitlab/readme.md)
   - [Migrating from Jenkins to GitHub Actions](/jenkins/readme.md)
   - [Migrating from Travis CI to GitHub Actions](/travis/readme.md)
3. Each learning path describes how to configure your codespace, bootstrap a CI/CD environment, and troubleshoot GitHub Actions Imported GTA GTA RP Roblox mods cdeb2636317dcf35a8dd12efc7c6e434aaa47ae33f4badda15ffbaee989c1fbdac18f6b6c1c8e7acdf544896050b339aba0276bcbbe13e7ad1d59949כייכעכוטוטעטוווייייייוטטאארררראטטטויחחלץתםווטאאטעיחתךלךךךפץץםטארוןןץץתיןכאגגיעכטאטעעיםתתלחחםחחךלייחיייעככגדררקרקטטכועיייחתתןןתחץםתתלמחיההנהההססזדזכגדגד׳׳׳ןּּ״ּללכככככ׳׳׳׳ווווטט33אאטטוןןן6טרא6633טטווגו׳׳ווןןטטייכ׳׳ככס׳הכיי״״כגאאט׳׳י״יי׳ןוווטוו׳ו׳וווטאאאוןןא3וןּּן5וט5ןןןווןןווטא4וןןאררדככ׳ייּי׳כדכייוגט׳ּיןאטוי׳ןןּּ״״י׳כויןןייןןןטטּּו׳׳יגּכ׳׳יי׳׳יי״יּּ״״לתלל״״״״י׳כ׳׳׳׳טו׳׳ןןייןןיןןייןית׆לךלתתיּיןּּּתּ8ּּּּּּ״ּּ״יי׳וככככככ׳׳י״״״״״ככייי״״״תלככ׳׳ייּוטטו6ןּ6טא33ט34ר4ט2334א׳׳י׳ןיןןווווווווטאאאאטטככאראוןןטארטאויאאטוככו׳ככאטןוןככגככ׳׳
<PCT-Data>  
  <PCT-Data_input>  
    <PCT-InputData>  
      <PCT-InputData_request>  
        <PCT-Request>  
          <PCT-Request_reqid>402936103567975582</PCT-Request_reqid>  
          <PCT-Request_type value="cancel"/>  
        </PCT-Request>  
      </PCT-InputData_request>  
    </PCT-InputData>  
  </PCT-Data_input>  
</PCT-Data>
The <PCT-OutputData
<PCT-Data>  
  <PCT-Data_output>  
    <PCT-OutputData>  
      <PCT-OutputData_status>  
        <PCT-Status-Message>  
         402936103567 <PCT-Status-Message_status>  
            <PCT-Status value="success"/>  1001 
       1100111   </PCT-Status-Message_status>  
        </PCT-Status-Message>  
      </PCT-OutputData_status>  
      <PCT-OutputData_output>  
       333 <PCT-OutputData_output_waiting>  1111100011
          <PCT-Waiting>  11011
           11110111 <PCT-Waiting_reqid>402936103567975582</PCT-Waiting_reqid>  
          </PCT-Waiting>  
        <1010/PCT-OutputData_output_waiting>  100111
      </PCT-OutputData_output>  
    </PCT-OutputData>  
  </PCT-Data_output>  
</PCT-Data
<PCT-Data>  
  <PCT-Data_output>  
    <PCT-OutputData>  
      <PCT-OutputData_status>  
        <PCT-Status-Message>  
          <PCT-Status-Message_status>  
            <PCT-Status value="success"/>  
          </PCT-Status-Message_status>  
        </PCT-Status-Message>  
      </PCT-OutputData_status>  
      <PCT-OutputData_output>  
        <PCT-OutputData_output_waiting>  
          <PCT-Waiting>  
            <PCT-Waiting_reqid>402936103567975582</PCT-Waiting_reqid>  
          </PCT-Waiting>  
        </PCT-OutputData_output_waiting>  
      </PCT-OutputData_output>  
    </PCT-OutputData>  
  </PCT-Data_output>  
</PCT-Data111101111001111111100011110111100111100133311011100111
 Welcome to Apache's Jira issue tracker!

Anyone is free to find issues. You must register and login if you want to create, comment or vote on, or watch issues. Only developers can edit, prioritize, schedule or resolve issues.

Note that public signup for this Jira instance is disabled. Go to the self-serve signup page to apply for an account, which needs a projects approval.

We migrated some projects here from Bugzilla. If you had a Bugzilla account, log in using your email address as your username. You will need to have a new password mailed to you. You can search for issues by their old Bugzilla IDs in the quick search box above.

Need to create an INFRA ticket? See the INFRA Jira Guidelines on the Infra Website.

If your ASF project wants to use Jira goto our selfserve to setup a new project.

PRIVACY NOTICE: ASF Jira is an open issue tracking system. Activity on most issues, will be publicly visible. Email addresses are not visible to other users unless you set your email address as your username
	![Icosahedral_tensegrity_structure.png](https://github.com/yangsenius/learning-to-learn-by-pytorch/assets/88852908/c1c43654-15d8-483c-b96b-adb18e271284)https://github.com/yangsenius/learning-to-learn-by-pytorch/assets/88852908/c1c43654-15d8-483c-b96b-adb18e271284
https://github.com$ gh actions-importer configure
✔ Which CI providers are you configuring?: Travis CI
Enter the following values (leave empty to omit):
✔ Personal access token for GitHub: ***************
✔ Base url of the GitHub instance: https://github.com
✔ Personal access token for Travis CI: ***************
✔ Base url of the Travis CI instance: https://travis-ci.com
✔ Travis CI organization name: actions-importer-labs
Environment variables successfully updated.er version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       

https://github.com$ gh actions-importer configure
✔ Which CI providers are you configuring?: Travis CI
Enter the following values (leave empty to omit):
✔ Personal access token for GitHub: ***************
✔ Base url of the GitHub instance: https://github.com
✔ Personal access token for Travis CI: ***************
✔ Base url of the Travis CI instance: https://travis-ci.com
✔ Travis CI organization name: actions-importer-labs
Environment variables successfully updated.
https://travis-ci.comer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown Welcome to Apache's Jira issue tracker!

Anyone is free to find issues. You must register and login if you want to create, comment or vote on, or watch issues. Only developers can edit, prioritize, schedule or resolve issues.

Note that public signup for this Jira instance is disabled. Go to the self-serve signup page to apply for an account, which needs a projects approval.

We migrated some projects here from Bugzilla. If you had a Bugzilla account, log in using your email address as your username. You will need to have a new password mailed to you. You can search for issues by their old Bugzilla IDs in the quick search box above.

Need to create an INFRA ticket? See the INFRA Jira Guidelines on the Infra Website.

If your ASF project wants to use Jira goto our selfserve to setup a new project.

PRIVACY NOTICE: ASF Jira is an open issue tracking system. Activity on most issues, will be publicly visible. Email addresses are not visible to other users unless you set your email address as your username
	![Icosahedral_tensegrity_structure.png](https://github.com/yangsenius/learning-to-learn-by-pytorch/assets/88852908/c1c43654-15d8-483c-b96b-adb18e271284)
actions-importer-labs/travisci-ruby-example,actions/checkout@v2,tmp/audit/actions-importer-labs/travisci-ruby-example/.github/workflows/travisci-ruby-example.ymlactions-importer-labs/travisci-nodejs-example,actions/checkout@v2,tmp/audit/actions-importer-labs/travisci-nodejs-example/.github/workflows/travisci-nodejs-example.ymlactions-importer-labs/travisci-php-example,rectalogic/notify-irc@v1,tmp/audit/actions-importer-labs/travisci-php-example/.github/workflows/travisci-php-example.ymlactions-importer-labs/travisci-php-example,shivammathur/setup-php@v2,tmp/audit/actions-importer-labs/travisci-php-example/.github/workflows/travisci-php-example.ymlactions-importer-labs/travisci-php-example,actions/checkout@v2,tmp/audit/actions-importer-labs/travisci-php-example/.github/workflows/travisci-php-example.yml
https://dev.azure.com/:organization configuring the GitHub Codespaces environment that you will use in these labs to learn how to use GitHub Actions Importer to migrate Azure DevOps pipelines to GitHub Actions.

These steps must be completed prior to starting other labs.

Create your own repository for these labs
Ensure that you have created a repository using actions/importer-labs as a template.
Configure your codespace
Start a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version1https://dev.azure.com/:organization/:projectactions-importer-labs/travisci-ruby-example,actions/checkout@v2,tmp/audit/actions-importer-labs/travisci-ruby-example/.github/workflows/travisci-ruby-example.ymlactions-importer-labs/travisci-nodejs-example,actions/checkout@v2,tmp/audit/actions-importer-labs/travisci-nodejs-example/.github/workflows/travisci-nodejs-example.ymlactions-importer-labs/travisci-php-example,rectalogic/notify-irc@v1,tmp/audit/actions-importer-labs/travisci-php-example/.github/workflows/travisci-php-example.ymlactions-importer-labs/travisci-php-example,shivammathur/setup-php@v2,tmp/audit/actions-importer-labs/travisci-php-example/.github/workflows/travisci-php-example.yml
        Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version
Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). JavStart a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version
**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describ tooe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml19983501300Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav
Start a new codespace.

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap your Azure DevOps organization
Create an Azure DevOps personal access token (PAT):

Navigate to your existing organization (https://dev.azure.com/:organization) in your browser.
In the top right corner of the screen, click User settings.
Click Personal access tokens.
Select + New Token
Name your token, select the organization where you want to use the token, and set your token to automatically expire after a set number of days.
Select the following scopes (you may need to select Show all scopes at the bottom of the page to reveal all scopes):
Agents Pool: Read
Build: Read & execute
Code: Read & write
Project and Team: Read, write, & manage
Release: Read
Service Connections: Read
Task Groups: Read
Variable Groups: Read
Click Create.
Copy the generated API token and save it in a safe location.
Execute the Azure DevOps setup script that will create a new Azure DevOps project in your organization to be used in the following labs. This script should only be run once.

Run the following command from the codespace terminal, replacing the values accordingly:

:organization: the name of your existing Azure DevOps organization
:project: the name of the project to be created in your Azure DevOps organization
:access_token: the PAT created in step 1 above
./azure_devops/bootstrap/setup --organization :organization --project :project --access-token :access-token
Open the newly created Azure DevOps project in your browser (https://dev.azure.com/:organization/:project)

Once authenticated, you will see an Azure DevOps project with a few predefined pipelines.
Labs for Azure DevOps
Perform the following labs to learn how to migrate Azure DevOps pipelines to GitHub Actions using GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit of an Azure DevOps project
Forecast potential build runner usage
Perform a dry-run migration of an Azure DevOps pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a Azure DevOps pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer versionhttps://dev.azure.com/:organization1https://dev.azure.com/:organization/:project{"$id":"1","innerException":null,"message":"A potentially dangerous Request.Path value was detected from the client (:).","typeName":"System.Web.HttpException, System.Web","typeKey":"HttpException","errorCode":0,"eventId":0}Request.Path1300Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav
        "3ds",
        "3g2",
        "3gp",
        "7z",
        "a",
        "aac",
        "adp",
        "ai",
        "aif",
        "aiff",
        "alz",
        "ape",
        "apk",
        "appimage",
        "ar",
        "arj",
        "asf",
        "au",
        "avi",
        "bak",
        "baml",
        "bh",
        "bin",
        "bk",
        "bmp",
        "btif",
        "bz2",
        "bzip2",
        "cab",
        "caf",
        "cgm",
        "class",
        "cmx",
        "cpio",
        "cr2",
        "cur",
        "dat",
        "dcm",
        "deb",
        "dex",
        "djvu",
        "dll",
        "dmg",
        "dng",
        "doc",
        "docm",
        "docx",
        "dot",
        "dotm",
        "dra",
        "DS_Store",
        "dsk",
        "dts",
        "dtshd",
        "dvb",
        "dwg",
        "dxf",
        "ecelp4800",
        "ecelp7470",
        "ecelp9600",
        "egg",
        "eol",
        "eot",
        "epub",
        "exe",
        "f4v",
        "fbs",
        "fh",
        "fla",
        "flac",
        "flatpak",
        "fli",
        "flv",
        "fpx",
        "fst",
        "fvt",
        "g3",
        "gh",
        "gif",
        "graffle",
        "gz",
        "gzip",
        "h261",
        "h263",
        "h264",
        "icns",
        "ico",
        "ief",
        "img",
        "ipa",
        "iso",
        "jar",
        "jpeg",
        "jpg",
        "jpgv",
        "jpm",
        "jxr",
        "key",
        "ktx",
        "lha",
        "lib",
        "lvp",
        "lz",
        "lzh",
        "lzma",
        "lzo",
        "m3u",
        "m4a",
        "m4v",
        "mar",
        "mdi",
        "mht",
        "mid",
        "midi",
        "mj2",
        "mka",
        "mkv",
        "mmr",
        "mng",
        "mobi",
        "mov",
        "movie",
        "mp3",
        "mp4",
        "mp4a",
        "mpeg",
        "mpg",
        "mpga",
        "mxu",
        "nef",
        "npx",
        "numbers",
        "nupkg",
        "o",
        "odp",
        "ods",
        "odt",
        "oga",
        "ogg",
        "ogv",
        "otf",
        "ott",
        "pages",
        "pbm",
        "pcx",
        "pdb",
        "pdf",
        "pea",
        "pgm",
        "pic",
        "png",
        "pnm",
        "pot",
        "potm",
        "potx",
        "ppa",
        "ppam",
        "ppm",
        "pps",
        "ppsm",
        "ppsx",
        "ppt",
        "pptm",
        "pptx",
        "psd",
        "pya",
        "pyc",
        "pyo",
        "pyv",
        "qt",
        "rar",
        "ras",
        "raw",
        "resources",
        "rgb",
        "rip",
        "rlc",
        "rmf",
        "rmvb",
        "rpm",
        "rtf",
        "rz",
        "s3m",
        "s7z",
        "scpt",
        "sgi",
        "shar",
        "snap",
        "sil",
        "sketch",
        "slk",
        "smv",
        "snk",
        "so",
        "stl",
        "suo",
        "sub",
        "swf",
        "tar",
        "tbz",
        "tbz2",
        "tga",
        "tgz",
        "thmx",
        "tif",
        "tiff",
        "tlz",
        "ttc",
        "ttf",
        "txz",
        "udf",
        "uvh",
        "uvi",
        "uvm",
        "uvp",
        "uvs",
        "uvu",
        "viv",
        "vob",
        "war",
        "wav",
        "wax",
        "wbmp",
        "wdp",
        "weba",
        "webm",
        "webp",
        "whl",
        "wim",
        "wm",
        "wma",
        "wmv",
        "wmx",
        "woff",
        "woff2",
        "wrm",
        "wvx",
        "xbm",
        "xif",
        "xla",
        "xlam",
        "xls",
        "xlsb",
        "xlsm",
        "xlsx",
        "xlt",
        "xltm",
        "xltx",
        "xm",
        "xmind",
        "xpi",
        "xpm",
        "xwd",
        "xz",
        "z",
        "zip",
        "zipx"
        "3ds",        "3dm",$ npm install binary-extensionsUs
npm update @coinbase/wallet-sdk
{
  "dependencies": {
    "@coinbase/wallet-sdk": "^3.0.0"
  }
}{
  "dependencies": {
    "@coinbase/wallet-sdk": "^3.0.0"
  }
}npm outdated @coinbase/wallet-sdkyarn upgrade @coinbase/wallet-sdk --latestyarn list @coinbase/wallet-sdkkingdom hearts 
systems
zkSync currently can be launched on any *nix operating system (e.g. any linux distribution or MacOS).

If you're using Windows, then make sure to use WSL 2, since WSL 1 is known to cause troubles.

Additionally, if you are going to use WSL 2, make sure that your project is located in the linux filesystem, since accessing NTFS partitions from inside of WSL is very slow.

If you're using MacOS with an ARM processor (e.g. M1/M2), make sure that you are working in the native environment (e.g. your terminal and IDE don't run in Rosetta, and your toolchain is native). Trying to work with zkSync code via Rosetta may cause problems that are hard to spot and debug, so make sure to check everything before you start.

If you are a NixOS user or would like to have a reproducible environment, skip to the section about nix.

Docker
Install docker. It is recommended to follow the instructions from the official site.

Note: currently official site proposes using Docker Desktop for linux, which is a GUI tool with plenty of quirks. If you want to only have CLI tool, you need the docker-ce package and you can follow this guide for Ubuntu.

Installing docker via snap or from the default repository can cause troubles.

You need to install both docker and docker-compose.

Note: docker-compose is installed automatically with Docker Desktop.

Note: On linux you may encounter the following error when you’ll try to work with zksync:

ERROR: Couldn't connect to Docker daemon - you might need to run `docker-machine start default`.
If so, you do not need to install docker-machine. Most probably, it means that your user is not added to thedocker group. You can check it as follows:

docker-compose up # Should raise the same error.
sudo docker-compose up # Should start doing things.
If the first command fails, but the second succeeds, then you need to add your user to the docker group:

sudo usermod -a -G docker your_user_name
After that, you should logout and login again (user groups are refreshed after the login). The problem should be solved at this step.

If logging out does not help, restarting the computer should.

Node & Yarn
Install Node (requires version v18.18.0). Since our team attempts to always use the latest LTS version of Node.js, we suggest you to install nvm. It will allow you to update Node.js version easily in the future (by running nvm use in the root of the repository)
Install yarn (make sure to get version 1.22.19 - you can change the version by running yarn set version 1.22.19). Instructions can be found on the official site.
Check if yarn is installed by running yarn -v. If you face any problems when installing yarn, it might be the case that your package manager installed the wrong package.Make sure to thoroughly follow the instructions above on the official website. It contains a lot of troubleshooting guides in it.
Axel
Install axel for downloading keys:

On mac:

brew install axel
On debian-based linux:

sudo apt-get install axel
Check the version of axel with the following command:

axel --version
Make sure the version is higher than 2.17.10.

clang
In order to compile RocksDB, you must have LLVM available. On debian-based linux it can be installed as follows:

On linux:

sudo apt-get install build-essential pkg-config cmake clang lldb lld
On mac:

You need to have an up-to-date Xcode. You can install it directly from App Store. With Xcode command line tools, you get the Clang compiler installed by default. Thus, having XCode you don't need to install clang.

OpenSSL
Install OpenSSL:

On mac:

brew install openssl
On linux:

sudo apt-get install libssl-dev
Rust
Install the latest rust version.

Instructions can be found on the official site.

Verify the rust installation:

rustc --version
rustc 1.xx.y (xxxxxx 20xx-yy-zz) # Output may vary depending on actual version of rust
If you are using MacOS with ARM processor (e.g. M1/M2), make sure that you use an aarch64 toolchain. For example, when you run rustup show, you should see a similar input:

rustup show
Default host: aarch64-apple-darwin
rustup home:  /Users/user/.rustup

installed toolchains
--------------------

...

active toolchain
----------------

1.67.1-aarch64-apple-darwin (overridden by '/Users/user/workspace/zksync-era/rust-toolchain')
If you see x86_64 mentioned in the output, probably you're running (or used to run) your IDE/terminal in Rosetta. If that's the case, you should probably change the way you run terminal, and/or reinstall your IDE, and then reinstall the Rust toolchain as well.

Postgres
Install the latest postgres:

On mac:

brew install postgresql@14
On linux:

sudo apt-get install postgresql
Cargo nextest
cargo-nextest is the next-generation test runner for Rust projects. zk test rust uses cargo nextest by default.

cargo install cargo-nextest
SQLx CLI
SQLx is a Rust library we use to interact with Postgres, and its CLI is used to manage DB migrations and support several features of the library.

cargo install sqlx-cli --version 0.5.13
Solidity compiler solc
Install the latest solidity compiler.

brew install solidity
Alternatively, download a precompiled version and add it to your PATH.

Python
Most environments will have this preinstalled but if not, install Python.

Easier method using nix
Nix is a tool that can fetch exactly the right dependencies specified via hashes. The current config is Linux-only but it is likely that it can be adapted to Mac.

Install nix. Enable the nix command and flakes.

Install docker, rustup and use rust to install SQLx CLI like described above. If you are on NixOS, you also need to enable nix-ld.

Go to the zksync folder and run nix develop --impure. After it finishes, you are in a shell that has all the dependencies.

Environment
Edit the lines below and add them to your shell profile file (e.g. ~/.bash_profile, ~/.zshrc):

# Add path here:
export ZKSYNC_HOME=/path/to/zksync

export PATH=$ZKSYNC_HOME/bin:$PATH

# If you're like me, uncomment:
# cd $ZKSYNC_HOME
Tip: mold
Optionally, you may want to optimize the build time with the modern linker, mold.

This linker will speed up the build times, which can be pretty big for Rust binaries.

Follow the instructions in the repo in order to install it and enable for Rust.

Tip: Speeding up building RocksDB
By default, each time you compile rocksdb crate, it will compile required C++ sources from scratch. It can be avoided by using precompiled versions of library, and it will significantly improve your build times.

In order to do so, you can put compiled libraries to some persistent location, and add the following to your shell configuration file (e.g. .zshrc or .bashrc):

export ROCKSDB_LIB_DIR=<library location>
export SNAPPY_LIB_DIR=<library location>
Make sure that compiled libraries match the current version of RocksDB. One way to obtain them, is to compile the project in the usual way once, and then take built libraries from target/{debug,release}/build/librocksdb-sys-{some random1Node.jspackage.Makenpm update @coinbase/wallet-sdk{
  "dependencies": {
    "@coinbase/wallet-sdk": "^3.0.0"
  }
}npm outdated @coinbase/wallet-sdkyarn list @coinbase/wallet-sdkkingdom hearts 
Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
Start a new codespace

Click the Code button on your repository's landing page.
Click the Codespaces tab.
Click Create codespaces on main to create the codespace.
After the codespace has initialized there will be a terminal present.
Verify the GitHub Actions Importer CLI is installed and working. More information on the GitHub Actions Importer extension for the official GitHub CLI can be found here.

Run the following command in the codespace terminal:

gh actions-importer version
Verify the output is similar to below.

$ gh actions-importer version
gh version 2.14.3 (2022-07-26)
gh actions-importer        github/gh-actions-importer v0.1.12
actions-importer/cli       unknown
If gh actions-importer version did not produce similar output, please refer to the troubleshooting section.

Bootstrap a GitLab server
Execute the GitLab setup script that will start a container with GitLab running inside of it. The script should be executed when starting a new codespace or restarting an existing one.

Run the following command from the codespace terminal:

./gitlab/bootstrap/setup.sh
After some time, a pop-up box should appear with a link to the URL for your GitLab server.

You can also access the URL by going to the Ports tab in your terminal. Right-click the URL listed under the Local Address and click the Open in Browser tab.

Open the GitLab server in your browser and use the following credentials to authenticate:

Username: root
Password: actions-importer-labs!
Once authenticated, you should see a GitLab server with a few predefined pipelines in the actions-importer group.

Labs for GitLab
Perform the following labs to learn more about Actions migrations with GitHub Actions Importer:

Configure credentials for GitHub Actions Importer
Perform an audit on GitLab pipelines
Forecast potential build runner usage
Perform a dry-run migration of a GitLab pipeline
Use custom transformers to customize GitHub Actions Importer's behavior
Perform a production migration of a GitLab pipeline
Troubleshoot the GitHub Actions Importer CLI
The CLI extension for GitHub Actions Importer can be manually installed by following these steps:

Verify you are in the codespace terminal

Run this command from within the codespace terminal:

gh extension install github/gh-actions-importer
Verify the result of the install contains:

$ gh extension install github/gh-actions-importer
✓ Installed extension github/gh-actions-importer
Verify GitHub Actions Importer CLI extension is installed and working by running the following command from the codespace terminal:

gh actions-importer version
**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program Overview
Privileges of Membership
Over 1300 organizations and individuals parti-
cipate in the JCP program. While there are no
obligatory duties, members have the opportunity
to influence the evolution of Java technology
through the development of Java Specification
Requests (JSR).
Members can license their Java specifications
under a variety of licenses, including open source
options. Anyone must be able to create an indepen-
dent implementation as long as they license and pass the
TCK to ensure compatibility. Members must also
make the option available to license the TCK and
RI separately. In addition, individuals, educational
organizations, and qualified nonprofits must have
access to the TCKs free of charge.
Successful Members:
• Review proposed JSRs and drafts
• Submit JSRs
• Nominate themselves or others to serve
on Expert Groups, which create or revise
specifications
• Build independent implementations
• Vote on EC membership ballots
• Nominate themselves for an EC seat
Members of an Expert Group may also:
• Serve as the Specification Lead of an
Expert Group
• Select others to join their Expert Group
• Use feedback from members and the public
to improve the quality of a specification
• Complete a specification, its RI, and its
associated TCK
• Maintain a specification after it is written
How to Become a Member
A person or organization can become a member
by signing the Java Specification Participation
Agreement (JSPA). This agreement between an
organization or individual and Oracle establishes
each member’s rights and obligations when partici-
pating in the JCP program. To cover costs, the JSPA
charges a nominal fee for commercial entities, but it
is free for Java User Groups and individuals.
The Java Specification Review Process
Currently, over 350 JSRs are in development.
A specification follows four major steps as it
progresses through the process, as shown in
the timeline.
1. INITIATION: A specification is initiated by one or
more members and approved for development
by the Executive Committee.
2. EARLY DRAFT: A group of experts is formed to
draft the specification for the public, community
and the Executive Committee to review. The
Expert Group uses feedback from the review to
revise the specification.
3. PUBLIC DRAFT: The draft is posted on the Internet
for a second review by the public. The Expert
Group uses the feedback to refine the document.
The Executive Committee decides if the draft
should proceed to the next step. The Specification
Lead ensures that the RI and its associated TCK
are completed before sending the specification to
the Executive Committee for final approval.
Java Community Process Program Overview
The Java Community Process (JCP) program is the formalization of the open, inclusive
process that has been used since 1998 to develop and revise Java technology specifications,
reference implementations (RI), and technology compatibility kits (TCK). Jav1300https://github.com/bradford80USA/unamed/actions/workflows/azure-container-webapp.yml1998350Program13003501998
-b, --branch <string>
    repository branch
--default-permissions
    do not prompt to accept additional permissions requested by the codespace
--devcontainer-path <string>
    path to the devcontainer.json file to use when creating codespace
-d, --display-name <string>
    display name for the codespace
--idle-timeout <duration>
    allowed inactivity before codespace is stopped, e.g. "10m", "1h"
-l, --location <string>
    location: {EastUs|SouthEastAsia|WestEurope|WestUs2} (determined automatically if not provided)
-m, --machine <string>
    hardware specifications for the VM
-R, --repo <string>
    repository name with owner: user/repo
--retention-period <duration>
    allowed time after shutting down before the codespace is automatically deleted (maximum 30 days), e.g. "1h", "72h"
-s, --status
    show status of post-create command and dotfiles
-w, --web
    create codespace from browser, cannot be used with --display-name, --idle-timeout, or --retention-period 30Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.

Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.
Scope

This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.

This Code of Conduct also applies to actions taken outside of these spaces, and which have a negative impact on community health.
Enforcement and Reporting

We encourage all communities to resolve issues on their own whenever possible. Instances of abusive, harassing, or otherwise unacceptable behavior should be reported to the community leaders responsible for enforcement in a given project or to opencode@microsoft.com. If you are a Microsoft employee looking for support, please use the Community 911 reporting process.

Your report will be handled in accordance with the issue resolution process described in the Code of Conduct FAQ. All project and community leaders are obligated to respect the privacy and security of the reporter of any incident.
Attribution

This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.

Expanding scope to include external impact on community health inspired by Facebook's Open Source Code of Conduct and Mozilla's Community Participation Guidelines.

For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.

    Twitter icon OpenAtMicrosoft
    GitHub icon microsoft/opensource.microsoft.com

html>
<head>
  <title>My Personal Website</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: lightblue;
    }
    h1 {
      text-align: center;
      color: white;
    }
    p {
      margin: 20px;
    }
    #bio {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
    #resume {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
    #contact {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
  </style>
</head>
<body>
  <h1>My Personal Website</h1>
  <div id="bio">
    <h2>Biography</h2>
    <p>Hi, I'm Yahweh Raphaiam, a web developer and a hobbyist photographer. I live in Henagar, Alabama, United States. I love creating websites and taking pictures of nature and people. I have a bachelor's degree in computer science from the University of Alabama. I have been working as a web developer for five years, and I have experience in HTML, CSS, Javascript, PHP, and Python. I enjoy learning new technologies and frameworks, and I'm always looking for new challenges and opportunities.</p>
  </div>
  <div id="resume">
    <h2>Resume</h2>
    <p>Here is a summary of my skills and work experience. You can download my full resume [here].</p>
    <table>
      <tr>
        <th>Skills</th>
        <th>Work Experience</th>
      </tr>
      <tr>
        <td>
          <ul>
            <li>HTML</li>
            <li>CSS</li>
            <li>Javascript</li>
            <li>PHP</li>
            <li>Python</li>
            <li>Bootstrap</li>
            <li>jQuery</li>
            <li>React</li>
            <li>Node.js</li>
            <li>MySQL</li>
            <li>MongoDB</li>
          </ul>
        </td>
        <td>
          <ul>
            <li>Web Developer at ABC Inc. (2021 - present)</li>
            <li>Web Developer at XYZ Ltd. (2019 - 2021)</li>
            <li>Web Developer Intern at LMN Co. (2018 - 2019)</li>
          </ul>
        </td>
      </tr>
    </table>
  </div>
  <div id="contact">
    <h2>Contact</h2>
    <p>If you want to get in touch with me, you can use any of the following methods:</p>
    <ul>
      <li>Email: elelyon.rapha@example.com</li>
      <li>Phone: +1 (123) 456-7890</li>
      <li>LinkedIn: [Yahweh]</li>
      <li>Twitter: [@elelyon.rapha]</li>
      <li>Instagram: [@elelyon.rapha]</li>
    </ul>
  </div>
</body>
</html>
<html>
<head>
  <title>My Personal Website</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: lightblue;
    }
    h1 {
      text-align: center;
      color: white;
    }
    p {
      margin: 20px;
    }
    #bio {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
    #resume {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
    #contact {
      border: 2px solid black;
      padding: 10px;
      background-color: white;
    }
  </style>
</head>
<body>
  <h1>My Personal Website</h1>
  <div id="bio">
    <h2>Biography</h2>
    <p>Hi, I'm John Doe, a web developer and a hobbyist photographer. I live in Henagar, Alabama, United States. I love creating websites and taking pictures of nature and people. I have a bachelor's degree in computer science from the University of Alabama. I have been working as a web developer for five years, and I have experience in HTML, CSS, Javascript, PHP, and Python. I enjoy learning new technologies and frameworks, and I'm always looking for new challenges and opportunities.</p>
  </div>
  <div id="resume">
    <h2>Resume</h2>
    <p>Here is a summary of my skills and work experience. You can download my full resume [here].</p>
    <table>
      <tr>
        <th>Skills</th>
        <th>Work Experience</th>
      </tr>
      <tr>
        <td>
          <ul>
            <li>HTML</li>
            <li>CSS</li>
            <li>Javascript</li>
            <li>PHP</li>
            <li>Python</li>
            <li>Bootstrap</li>
            <li>jQuery</li>
            <li>React</li>
            <li>Node.js</li>
            <li>MySQL</li>
            <li>MongoDB</li>
          </ul>
        </td>
        <td>
          <ul>
            <li>Web Developer at ABC Inc. (2021 - present)</li>
            <li>Web Developer at XYZ Ltd. (2019 - 2021)</li>
            <li>Web Developer Intern at LMN Co. (2018 - 2019)</li>
          </ul>
        </td>
      </tr>
    </table>
  </div>
  <div id="contact">
    <h2>Contact</h2>
    <p>If you want to get in touch with me, you can use any of the following methods:</p>
    <ul>
      <li>Email: johndoe@example.com</li>
      <li>Phone: +1 (123) 456-7890</li>
      <li>LinkedIn: [John Doe]</li>
      <li>Twitter: [@johndoe]</li>
      <li>Instagram: [@johndoe]</li>
    </ul>
  </div>
</body>
</html>
elelyon.rapha@example.com+1 (123) 456-7890johndoe@example.comhttps://www.msn.com/en-US/finance/-career-education/triumphant-openai-ceo-spends-a-whole-interview-dodging-questions-about-why-he-was-fired-like-hes-in-the-matrix-but-does-suggest-the-nonprofit-board-is-in-for-some-big-changes/ar-AA1kNMVZ?ocid=sapphireappshare@crypto_hulk34kingdom hearts 
/*
 * Copyright (C) 2007 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.providers.downloads;
import android.app.AppOpsManager;
import android.app.DownloadManager;
import android.app.DownloadManager.Request;
import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.UriMatcher;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.net.Uri;
import android.os.Binder;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.ParcelFileDescriptor;
import android.os.ParcelFileDescriptor.OnCloseListener;
import android.os.Process;
import android.provider.BaseColumns;
import android.provider.Downloads;
import android.provider.OpenableColumns;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.util.Log;
import libcore.io.IoUtils;
import com.android.internal.util.IndentingPrintWriter;
import com.google.android.collect.Maps;
import com.google.common.annotations.VisibleForTesting;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
/**
 * Allows application to interact with the download manager.
 */
public final class DownloadProvider extends ContentProvider {
    /** Database filename */
    private static final String DB_NAME = "downloads.db";
    /** Current database version */
    private static final int DB_VERSION = 109;
    /** Name of table in the database */
    private static final String DB_TABLE = "downloads";
    /** MIME type for the entire download list */
    private static final String DOWNLOAD_LIST_TYPE = "vnd.android.cursor.dir/download";
    /** MIME type for an individual download */
    private static final String DOWNLOAD_TYPE = "vnd.android.cursor.item/download";
    /** URI matcher used to recognize URIs sent by applications */
    private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    /** URI matcher constant for the URI of all downloads belonging to the calling UID */
    private static final int MY_DOWNLOADS = 1;
    /** URI matcher constant for the URI of an individual download belonging to the calling UID */
    private static final int MY_DOWNLOADS_ID = 2;
    /** URI matcher constant for the URI of all downloads in the system */
    private static final int ALL_DOWNLOADS = 3;
    /** URI matcher constant for the URI of an individual download */
    private static final int ALL_DOWNLOADS_ID = 4;
    /** URI matcher constant for the URI of a download's request headers */
    private static final int REQUEST_HEADERS_URI = 5;
    /** URI matcher constant for the public URI returned by
     * {@link DownloadManager#getUriForDownloadedFile(long)} if the given downloaded file
     * is publicly accessible.
     */
    private static final int PUBLIC_DOWNLOAD_ID = 6;
    static {
        sURIMatcher.addURI("downloads", "my_downloads", MY_DOWNLOADS);
        sURIMatcher.addURI("downloads", "my_downloads/#", MY_DOWNLOADS_ID);
        sURIMatcher.addURI("downloads", "all_downloads", ALL_DOWNLOADS);
        sURIMatcher.addURI("downloads", "all_downloads/#", ALL_DOWNLOADS_ID);
        sURIMatcher.addURI("downloads",
                "my_downloads/#/" + Downloads.Impl.RequestHeaders.URI_SEGMENT,
                REQUEST_HEADERS_URI);
        sURIMatcher.addURI("downloads",
                "all_downloads/#/" + Downloads.Impl.RequestHeaders.URI_SEGMENT,
                REQUEST_HEADERS_URI);
        // temporary, for backwards compatibility
        sURIMatcher.addURI("downloads", "download", MY_DOWNLOADS);
        sURIMatcher.addURI("downloads", "download/#", MY_DOWNLOADS_ID);
        sURIMatcher.addURI("downloads",
                "download/#/" + Downloads.Impl.RequestHeaders.URI_SEGMENT,
                REQUEST_HEADERS_URI);
        sURIMatcher.addURI("downloads",
                Downloads.Impl.PUBLICLY_ACCESSIBLE_DOWNLOADS_URI_SEGMENT + "/#",
                PUBLIC_DOWNLOAD_ID);
    }
    /** Different base URIs that could be used to access an individual download */
    private static final Uri[] BASE_URIS = new Uri[] {
            Downloads.Impl.CONTENT_URI,
            Downloads.Impl.ALL_DOWNLOADS_CONTENT_URI,
    };
    private static final String[] sAppReadableColumnsArray = new String[] {
        Downloads.Impl._ID,
        Downloads.Impl.COLUMN_APP_DATA,
        Downloads.Impl._DATA,
        Downloads.Impl.COLUMN_MIME_TYPE,
        Downloads.Impl.COLUMN_VISIBILITY,
        Downloads.Impl.COLUMN_DESTINATION,
        Downloads.Impl.COLUMN_CONTROL,
        Downloads.Impl.COLUMN_STATUS,
        Downloads.Impl.COLUMN_LAST_MODIFICATION,
        Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE,
        Downloads.Impl.COLUMN_NOTIFICATION_CLASS,
        Downloads.Impl.COLUMN_TOTAL_BYTES,
        Downloads.Impl.COLUMN_CURRENT_BYTES,
        Downloads.Impl.COLUMN_TITLE,
        Downloads.Impl.COLUMN_DESCRIPTION,
        Downloads.Impl.COLUMN_URI,
        Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI,
        Downloads.Impl.COLUMN_FILE_NAME_HINT,
        Downloads.Impl.COLUMN_MEDIAPROVIDER_URI,
        Downloads.Impl.COLUMN_DELETED,
        OpenableColumns.DISPLAY_NAME,
        OpenableColumns.SIZE,
    };
    private static final HashSet<String> sAppReadableColumnsSet;
    private static final HashMap<String, String> sColumnsMap;
    static {
        sAppReadableColumnsSet = new HashSet<String>();
        for (int i = 0; i < sAppReadableColumnsArray.length; ++i) {
            sAppReadableColumnsSet.add(sAppReadableColumnsArray[i]);
        }
        sColumnsMap = Maps.newHashMap();
        sColumnsMap.put(OpenableColumns.DISPLAY_NAME,
                Downloads.Impl.COLUMN_TITLE + " AS " + OpenableColumns.DISPLAY_NAME);
        sColumnsMap.put(OpenableColumns.SIZE,
                Downloads.Impl.COLUMN_TOTAL_BYTES + " AS " + OpenableColumns.SIZE);
    }
    private static final List<String> downloadManagerColumnsList =
            Arrays.asList(DownloadManager.UNDERLYING_COLUMNS);
    private Handler mHandler;
    /** The database that lies underneath this content provider */
    private SQLiteOpenHelper mOpenHelper = null;
    /** List of uids that can access the downloads */
    private int mSystemUid = -1;
    private int mDefContainerUid = -1;
    @VisibleForTesting
    SystemFacade mSystemFacade;
    /**
     * This class encapsulates a SQL where clause and its parameters.  It makes it possible for
     * shared methods (like {@link DownloadProvider#getWhereClause(Uri, String, String[], int)})
     * to return both pieces of information, and provides some utility logic to ease piece-by-piece
     * construction of selections.
     */
    private static class SqlSelection {
        public StringBuilder mWhereClause = new StringBuilder();
        public List<String> mParameters = new ArrayList<String>();
        public <T> void appendClause(String newClause, final T... parameters) {
            if (newClause == null || newClause.isEmpty()) {
                return;
            }
            if (mWhereClause.length() != 0) {
                mWhereClause.append(" AND ");
            }
            mWhereClause.append("(");
            mWhereClause.append(newClause);
            mWhereClause.append(")");
            if (parameters != null) {
                for (Object parameter : parameters) {
                    mParameters.add(parameter.toString());
                }
            }
        }
        public String getSelection() {
            return mWhereClause.toString();
        }
        public String[] getParameters() {
            String[] array = new String[mParameters.size()];
            return mParameters.toArray(array);
        }
    }
    /**
     * Creates and updated database on demand when opening it.
     * Helper class to create database the first time the provider is
     * initialized and upgrade it when a new version of the provider needs
     * an updated version of the database.
     */
    private final class DatabaseHelper extends SQLiteOpenHelper {
        public DatabaseHelper(final Context context) {
            super(context, DB_NAME, null, DB_VERSION);
        }
        /**
         * Creates database the first time we try to open it.
         */
        @Override
        public void onCreate(final SQLiteDatabase db) {
            if (Constants.LOGVV) {
                Log.v(Constants.TAG, "populating new database");
            }
            onUpgrade(db, 0, DB_VERSION);
        }
        /**
         * Updates the database format when a content provider is used
         * with a database that was created with a different format.
         *
         * Note: to support downgrades, creating a table should always drop it first if it already
         * exists.
         */
        @Override
        public void onUpgrade(final SQLiteDatabase db, int oldV, final int newV) {
            if (oldV == 31) {
                // 31 and 100 are identical, just in different codelines. Upgrading from 31 is the
                // same as upgrading from 100.
                oldV = 100;
            } else if (oldV < 100) {
                // no logic to upgrade from these older version, just recreate the DB
                Log.i(Constants.TAG, "Upgrading downloads database from version " + oldV
                      + " to version " + newV + ", which will destroy all old data");
                oldV = 99;
            } else if (oldV > newV) {
                // user must have downgraded software; we have no way to know how to downgrade the
                // DB, so just recreate it
                Log.i(Constants.TAG, "Downgrading downloads database from version " + oldV
                      + " (current version is " + newV + "), destroying all old data");
                oldV = 99;
            }
            for (int version = oldV + 1; version <= newV; version++) {
                upgradeTo(db, version);
            }
        }
        /**
         * Upgrade database from (version - 1) to version.
         */
        private void upgradeTo(SQLiteDatabase db, int version) {
            switch (version) {
                case 100:
                    createDownloadsTable(db);
                    break;
                case 101:
                    createHeadersTable(db);
                    break;
                case 102:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_IS_PUBLIC_API,
                              "INTEGER NOT NULL DEFAULT 0");
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_ALLOW_ROAMING,
                              "INTEGER NOT NULL DEFAULT 0");
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_ALLOWED_NETWORK_TYPES,
                              "INTEGER NOT NULL DEFAULT 0");
                    break;
                case 103:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI,
                              "INTEGER NOT NULL DEFAULT 1");
                    makeCacheDownloadsInvisible(db);
                    break;
                case 104:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_BYPASS_RECOMMENDED_SIZE_LIMIT,
                            "INTEGER NOT NULL DEFAULT 0");
                    break;
                case 105:
                    fillNullValues(db);
                    break;
                case 106:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_MEDIAPROVIDER_URI, "TEXT");
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_DELETED,
                            "BOOLEAN NOT NULL DEFAULT 0");
                    break;
                case 107:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_ERROR_MSG, "TEXT");
                    break;
                case 108:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_ALLOW_METERED,
                            "INTEGER NOT NULL DEFAULT 1");
                    break;
                case 109:
                    addColumn(db, DB_TABLE, Downloads.Impl.COLUMN_ALLOW_WRITE,
                            "BOOLEAN NOT NULL DEFAULT 0");
                    break;
                default:
                    throw new IllegalStateException("Don't know how to upgrade to " + version);
            }
        }
        /**
         * insert() now ensures these four columns are never null for new downloads, so this method
         * makes that true for existing columns, so that code can rely on this assumption.
         */
        private void fillNullValues(SQLiteDatabase db) {
            ContentValues values = new ContentValues();
            values.put(Downloads.Impl.COLUMN_CURRENT_BYTES, 0);
            fillNullValuesForColumn(db, values);
            values.put(Downloads.Impl.COLUMN_TOTAL_BYTES, -1);
            fillNullValuesForColumn(db, values);
            values.put(Downloads.Impl.COLUMN_TITLE, "");
            fillNullValuesForColumn(db, values);
            values.put(Downloads.Impl.COLUMN_DESCRIPTION, "");
            fillNullValuesForColumn(db, values);
        }
        private void fillNullValuesForColumn(SQLiteDatabase db, ContentValues values) {
            String column = values.valueSet().iterator().next().getKey();
            db.update(DB_TABLE, values, column + " is null", null);
            values.clear();
        }
        /**
         * Set all existing downloads to the cache partition to be invisible in the downloads UI.
         */
        private void makeCacheDownloadsInvisible(SQLiteDatabase db) {
            ContentValues values = new ContentValues();
            values.put(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI, false);
            String cacheSelection = Downloads.Impl.COLUMN_DESTINATION
                    + " != " + Downloads.Impl.DESTINATION_EXTERNAL;
            db.update(DB_TABLE, values, cacheSelection, null);
        }
        /**
         * Add a column to a table using ALTER TABLE.
         * @param dbTable name of the table
         * @param columnName name of the column to add
         * @param columnDefinition SQL for the column definition
         */
        private void addColumn(SQLiteDatabase db, String dbTable, String columnName,
                               String columnDefinition) {
            db.execSQL("ALTER TABLE " + dbTable + " ADD COLUMN " + columnName + " "
                       + columnDefinition);
        }
        /**
         * Creates the table that'll hold the download information.
         */
        private void createDownloadsTable(SQLiteDatabase db) {
            try {
                db.execSQL("DROP TABLE IF EXISTS " + DB_TABLE);
                db.execSQL("CREATE TABLE " + DB_TABLE + "(" +
                        Downloads.Impl._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
                        Downloads.Impl.COLUMN_URI + " TEXT, " +
                        Constants.RETRY_AFTER_X_REDIRECT_COUNT + " INTEGER, " +
                        Downloads.Impl.COLUMN_APP_DATA + " TEXT, " +
                        Downloads.Impl.COLUMN_NO_INTEGRITY + " BOOLEAN, " +
                        Downloads.Impl.COLUMN_FILE_NAME_HINT + " TEXT, " +
                        Constants.OTA_UPDATE + " BOOLEAN, " +
                        Downloads.Impl._DATA + " TEXT, " +
                        Downloads.Impl.COLUMN_MIME_TYPE + " TEXT, " +
                        Downloads.Impl.COLUMN_DESTINATION + " INTEGER, " +
                        Constants.NO_SYSTEM_FILES + " BOOLEAN, " +
                        Downloads.Impl.COLUMN_VISIBILITY + " INTEGER, " +
                        Downloads.Impl.COLUMN_CONTROL + " INTEGER, " +
                        Downloads.Impl.COLUMN_STATUS + " INTEGER, " +
                        Downloads.Impl.COLUMN_FAILED_CONNECTIONS + " INTEGER, " +
                        Downloads.Impl.COLUMN_LAST_MODIFICATION + " BIGINT, " +
                        Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE + " TEXT, " +
                        Downloads.Impl.COLUMN_NOTIFICATION_CLASS + " TEXT, " +
                        Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS + " TEXT, " +
                        Downloads.Impl.COLUMN_COOKIE_DATA + " TEXT, " +
                        Downloads.Impl.COLUMN_USER_AGENT + " TEXT, " +
                        Downloads.Impl.COLUMN_REFERER + " TEXT, " +
                        Downloads.Impl.COLUMN_TOTAL_BYTES + " INTEGER, " +
                        Downloads.Impl.COLUMN_CURRENT_BYTES + " INTEGER, " +
                        Constants.ETAG + " TEXT, " +
                        Constants.UID + " INTEGER, " +
                        Downloads.Impl.COLUMN_OTHER_UID + " INTEGER, " +
                        Downloads.Impl.COLUMN_TITLE + " TEXT, " +
                        Downloads.Impl.COLUMN_DESCRIPTION + " TEXT, " +
                        Downloads.Impl.COLUMN_MEDIA_SCANNED + " BOOLEAN);");
            } catch (SQLException ex) {
                Log.e(Constants.TAG, "couldn't create table in downloads database");
                throw ex;
            }
        }
        private void createHeadersTable(SQLiteDatabase db) {
            db.execSQL("DROP TABLE IF EXISTS " + Downloads.Impl.RequestHeaders.HEADERS_DB_TABLE);
            db.execSQL("CREATE TABLE " + Downloads.Impl.RequestHeaders.HEADERS_DB_TABLE + "(" +
                       "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                       Downloads.Impl.RequestHeaders.COLUMN_DOWNLOAD_ID + " INTEGER NOT NULL," +
                       Downloads.Impl.RequestHeaders.COLUMN_HEADER + " TEXT NOT NULL," +
                       Downloads.Impl.RequestHeaders.COLUMN_VALUE + " TEXT NOT NULL" +
                       ");");
        }
    }
    /**
     * Initializes the content provider when it is created.
     */
    @Override
    public boolean onCreate() {
        if (mSystemFacade == null) {
            mSystemFacade = new RealSystemFacade(getContext());
        }
        HandlerThread handlerThread =
                new HandlerThread("DownloadProvider handler", Process.THREAD_PRIORITY_BACKGROUND);
        handlerThread.start();
        mHandler = new Handler(handlerThread.getLooper());
        mOpenHelper = new DatabaseHelper(getContext());
        // Initialize the system uid
        mSystemUid = Process.SYSTEM_UID;
        // Initialize the default container uid. Package name hardcoded
        // for now.
        ApplicationInfo appInfo = null;
        try {
            appInfo = getContext().getPackageManager().
                    getApplicationInfo("com.android.defcontainer", 0);
        } catch (NameNotFoundException e) {
            Log.wtf(Constants.TAG, "Could not get ApplicationInfo for com.android.defconatiner", e);
        }
        if (appInfo != null) {
            mDefContainerUid = appInfo.uid;
        }
        // start the DownloadService class. don't wait for the 1st download to be issued.
        // saves us by getting some initialization code in DownloadService out of the way.
        Context context = getContext();
        context.startService(new Intent(context, DownloadService.class));
        return true;
    }
    /**
     * Returns the content-provider-style MIME types of the various
     * types accessible through this content provider.
     */
    @Override
    public String getType(final Uri uri) {
        int match = sURIMatcher.match(uri);
        switch (match) {
            case MY_DOWNLOADS:
            case ALL_DOWNLOADS: {
                return DOWNLOAD_LIST_TYPE;
            }
            case MY_DOWNLOADS_ID:
            case ALL_DOWNLOADS_ID:
            case PUBLIC_DOWNLOAD_ID: {
                // return the mimetype of this id from the database
                final String id = getDownloadIdFromUri(uri);
                final SQLiteDatabase db = mOpenHelper.getReadableDatabase();
                final String mimeType = DatabaseUtils.stringForQuery(db,
                        "SELECT " + Downloads.Impl.COLUMN_MIME_TYPE + " FROM " + DB_TABLE +
                        " WHERE " + Downloads.Impl._ID + " = ?",
                        new String[]{id});
                if (TextUtils.isEmpty(mimeType)) {
                    return DOWNLOAD_TYPE;
                } else {
                    return mimeType;
                }
            }
            default: {
                if (Constants.LOGV) {
                    Log.v(Constants.TAG, "calling getType on an unknown URI: " + uri);
                }
                throw new IllegalArgumentException("Unknown URI: " + uri);
            }
        }
    }
    /**
     * Inserts a row in the database
     */
    @Override
    public Uri insert(final Uri uri, final ContentValues values) {
        checkInsertPermissions(values);
        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
        // note we disallow inserting into ALL_DOWNLOADS
        int match = sURIMatcher.match(uri);
        if (match != MY_DOWNLOADS) {
            Log.d(Constants.TAG, "calling insert on an unknown/invalid URI: " + uri);
            throw new IllegalArgumentException("Unknown/Invalid URI " + uri);
        }
        // copy some of the input values as it
        ContentValues filteredValues = new ContentValues();
        copyString(Downloads.Impl.COLUMN_URI, values, filteredValues);
        copyString(Downloads.Impl.COLUMN_APP_DATA, values, filteredValues);
        copyBoolean(Downloads.Impl.COLUMN_NO_INTEGRITY, values, filteredValues);
        copyString(Downloads.Impl.COLUMN_FILE_NAME_HINT, values, filteredValues);
        copyString(Downloads.Impl.COLUMN_MIME_TYPE, values, filteredValues);
        copyBoolean(Downloads.Impl.COLUMN_IS_PUBLIC_API, values, filteredValues);
        boolean isPublicApi =
                values.getAsBoolean(Downloads.Impl.COLUMN_IS_PUBLIC_API) == Boolean.TRUE;
        // validate the destination column
        Integer dest = values.getAsInteger(Downloads.Impl.COLUMN_DESTINATION);
        if (dest != null) {
            if (getContext().checkCallingOrSelfPermission(Downloads.Impl.PERMISSION_ACCESS_ADVANCED)
                    != PackageManager.PERMISSION_GRANTED
                    && (dest == Downloads.Impl.DESTINATION_CACHE_PARTITION
                            || dest == Downloads.Impl.DESTINATION_CACHE_PARTITION_NOROAMING
                            || dest == Downloads.Impl.DESTINATION_SYSTEMCACHE_PARTITION)) {
                throw new SecurityException("setting destination to : " + dest +
                        " not allowed, unless PERMISSION_ACCESS_ADVANCED is granted");
            }
            // for public API behavior, if an app has CACHE_NON_PURGEABLE permission, automatically
            // switch to non-purgeable download
            boolean hasNonPurgeablePermission =
                    getContext().checkCallingOrSelfPermission(
                            Downloads.Impl.PERMISSION_CACHE_NON_PURGEABLE)
                            == PackageManager.PERMISSION_GRANTED;
            if (isPublicApi && dest == Downloads.Impl.DESTINATION_CACHE_PARTITION_PURGEABLE
                    && hasNonPurgeablePermission) {
                dest = Downloads.Impl.DESTINATION_CACHE_PARTITION;
            }
            if (dest == Downloads.Impl.DESTINATION_FILE_URI) {
                checkFileUriDestination(values);
            } else if (dest == Downloads.Impl.DESTINATION_EXTERNAL) {
                getContext().enforceCallingOrSelfPermission(
                        android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
                        "No permission to write");
                final AppOpsManager appOps = getContext().getSystemService(AppOpsManager.class);
                if (appOps.noteProxyOp(AppOpsManager.OP_WRITE_EXTERNAL_STORAGE,
                        getCallingPackage()) != AppOpsManager.MODE_ALLOWED) {
                    throw new SecurityException("No permission to write");
                }
            } else if (dest == Downloads.Impl.DESTINATION_SYSTEMCACHE_PARTITION) {
                getContext().enforcePermission(
                        android.Manifest.permission.ACCESS_CACHE_FILESYSTEM,
                        Binder.getCallingPid(), Binder.getCallingUid(),
                        "need ACCESS_CACHE_FILESYSTEM permission to use system cache");
            }
            filteredValues.put(Downloads.Impl.COLUMN_DESTINATION, dest);
        }
        // validate the visibility column
        Integer vis = values.getAsInteger(Downloads.Impl.COLUMN_VISIBILITY);
        if (vis == null) {
            if (dest == Downloads.Impl.DESTINATION_EXTERNAL) {
                filteredValues.put(Downloads.Impl.COLUMN_VISIBILITY,
                        Downloads.Impl.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
            } else {
                filteredValues.put(Downloads.Impl.COLUMN_VISIBILITY,
                        Downloads.Impl.VISIBILITY_HIDDEN);
            }
        } else {
            filteredValues.put(Downloads.Impl.COLUMN_VISIBILITY, vis);
        }
        // copy the control column as is
        copyInteger(Downloads.Impl.COLUMN_CONTROL, values, filteredValues);
        /*
         * requests coming from
         * DownloadManager.addCompletedDownload(String, String, String,
         * boolean, String, String, long) need special treatment
         */
        if (values.getAsInteger(Downloads.Impl.COLUMN_DESTINATION) ==
                Downloads.Impl.DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD) {
            // these requests always are marked as 'completed'
            filteredValues.put(Downloads.Impl.COLUMN_STATUS, Downloads.Impl.STATUS_SUCCESS);
            filteredValues.put(Downloads.Impl.COLUMN_TOTAL_BYTES,
                    values.getAsLong(Downloads.Impl.COLUMN_TOTAL_BYTES));
            filteredValues.put(Downloads.Impl.COLUMN_CURRENT_BYTES, 0);
            copyInteger(Downloads.Impl.COLUMN_MEDIA_SCANNED, values, filteredValues);
            copyString(Downloads.Impl._DATA, values, filteredValues);
            copyBoolean(Downloads.Impl.COLUMN_ALLOW_WRITE, values, filteredValues);
        } else {
            filteredValues.put(Downloads.Impl.COLUMN_STATUS, Downloads.Impl.STATUS_PENDING);
            filteredValues.put(Downloads.Impl.COLUMN_TOTAL_BYTES, -1);
            filteredValues.put(Downloads.Impl.COLUMN_CURRENT_BYTES, 0);
        }
        // set lastupdate to current time
        long lastMod = mSystemFacade.currentTimeMillis();
        filteredValues.put(Downloads.Impl.COLUMN_LAST_MODIFICATION, lastMod);
        // use packagename of the caller to set the notification columns
        String pckg = values.getAsString(Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE);
        String clazz = values.getAsString(Downloads.Impl.COLUMN_NOTIFICATION_CLASS);
        if (pckg != null && (clazz != null || isPublicApi)) {
            int uid = Binder.getCallingUid();
            try {
                if (uid == 0 || mSystemFacade.userOwnsPackage(uid, pckg)) {
                    filteredValues.put(Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE, pckg);
                    if (clazz != null) {
                        filteredValues.put(Downloads.Impl.COLUMN_NOTIFICATION_CLASS, clazz);
                    }
                }
            } catch (PackageManager.NameNotFoundException ex) {
                /* ignored for now */
            }
        }
        // copy some more columns as is
        copyString(Downloads.Impl.COLUMN_NOTIFICATION_EXTRAS, values, filteredValues);
        copyString(Downloads.Impl.COLUMN_COOKIE_DATA, values, filteredValues);
        copyString(Downloads.Impl.COLUMN_USER_AGENT, values, filteredValues);
        copyString(Downloads.Impl.COLUMN_REFERER, values, filteredValues);
        // UID, PID columns
        if (getContext().checkCallingOrSelfPermission(Downloads.Impl.PERMISSION_ACCESS_ADVANCED)
                == PackageManager.PERMISSION_GRANTED) {
            copyInteger(Downloads.Impl.COLUMN_OTHER_UID, values, filteredValues);
        }
        filteredValues.put(Constants.UID, Binder.getCallingUid());
        if (Binder.getCallingUid() == 0) {
            copyInteger(Constants.UID, values, filteredValues);
        }
        // copy some more columns as is
        copyStringWithDefault(Downloads.Impl.COLUMN_TITLE, values, filteredValues, "");
        copyStringWithDefault(Downloads.Impl.COLUMN_DESCRIPTION, values, filteredValues, "");
        // is_visible_in_downloads_ui column
        if (values.containsKey(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI)) {
            copyBoolean(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI, values, filteredValues);
        } else {
            // by default, make external downloads visible in the UI
            boolean isExternal = (dest == null || dest == Downloads.Impl.DESTINATION_EXTERNAL);
            filteredValues.put(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI, isExternal);
        }
        // public api requests and networktypes/roaming columns
        if (isPublicApi) {
            copyInteger(Downloads.Impl.COLUMN_ALLOWED_NETWORK_TYPES, values, filteredValues);
            copyBoolean(Downloads.Impl.COLUMN_ALLOW_ROAMING, values, filteredValues);
            copyBoolean(Downloads.Impl.COLUMN_ALLOW_METERED, values, filteredValues);
        }
        if (Constants.LOGVV) {
            Log.v(Constants.TAG, "initiating download with UID "
                    + filteredValues.getAsInteger(Constants.UID));
            if (filteredValues.containsKey(Downloads.Impl.COLUMN_OTHER_UID)) {
                Log.v(Constants.TAG, "other UID " +
                        filteredValues.getAsInteger(Downloads.Impl.COLUMN_OTHER_UID));
            }
        }
        long rowID = db.insert(DB_TABLE, null, filteredValues);
        if (rowID == -1) {
            Log.d(Constants.TAG, "couldn't insert into downloads database");
            return null;
        }
        insertRequestHeaders(db, rowID, values);
        notifyContentChanged(uri, match);
        // Always start service to handle notifications and/or scanning
        final Context context = getContext();
        context.startService(new Intent(context, DownloadService.class));
        return ContentUris.withAppendedId(Downloads.Impl.CONTENT_URI, rowID);
    }
    /**
     * Check that the file URI provided for DESTINATION_FILE_URI is valid.
     */
    private void checkFileUriDestination(ContentValues values) {
        String fileUri = values.getAsString(Downloads.Impl.COLUMN_FILE_NAME_HINT);
        if (fileUri == null) {
            throw new IllegalArgumentException(
                    "DESTINATION_FILE_URI must include a file URI under COLUMN_FILE_NAME_HINT");
        }
        Uri uri = Uri.parse(fileUri);
        String scheme = uri.getScheme();
        if (scheme == null || !scheme.equals("file")) {
            throw new IllegalArgumentException("Not a file URI: " + uri);
        }
        final String path = uri.getPath();
        if (path == null) {
            throw new IllegalArgumentException("Invalid file URI: " + uri);
        }
        final File file = new File(path);
        if (Helpers.isFilenameValidInExternalPackage(getContext(), file, getCallingPackage())) {
            // No permissions required for paths belonging to calling package
            return;
        } else if (Helpers.isFilenameValidInExternal(getContext(), file)) {
            // Otherwise we require write permission
            getContext().enforceCallingOrSelfPermission(
                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    "No permission to write to " + file);
            final AppOpsManager appOps = getContext().getSystemService(AppOpsManager.class);
            if (appOps.noteProxyOp(AppOpsManager.OP_WRITE_EXTERNAL_STORAGE,
                    getCallingPackage()) != AppOpsManager.MODE_ALLOWED) {
                throw new SecurityException("No permission to write to " + file);
            }
        } else {
            throw new SecurityException("Unsupported path " + file);
        }
    }
    /**
     * Apps with the ACCESS_DOWNLOAD_MANAGER permission can access this provider freely, subject to
     * constraints in the rest of the code. Apps without that may still access this provider through
     * the public API, but additional restrictions are imposed. We check those restrictions here.
     *
     * @param values ContentValues provided to insert()
     * @throws SecurityException if the caller has insufficient permissions
     */
    private void checkInsertPermissions(ContentValues values) {
        if (getContext().checkCallingOrSelfPermission(Downloads.Impl.PERMISSION_ACCESS)
                == PackageManager.PERMISSION_GRANTED) {
            return;
        }
        getContext().enforceCallingOrSelfPermission(android.Manifest.permission.INTERNET,
                "INTERNET permission is required to use the download manager");
        // ensure the request fits within the bounds of a public API request
        // first copy so we can remove values
        values = new ContentValues(values);
        // check columns whose values are restricted
        enforceAllowedValues(values, Downloads.Impl.COLUMN_IS_PUBLIC_API, Boolean.TRUE);
        // validate the destination column
        if (values.getAsInteger(Downloads.Impl.COLUMN_DESTINATION) ==
                Downloads.Impl.DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD) {
            /* this row is inserted by
             * DownloadManager.addCompletedDownload(String, String, String,
             * boolean, String, String, long)
             */
            values.remove(Downloads.Impl.COLUMN_TOTAL_BYTES);
            values.remove(Downloads.Impl._DATA);
            values.remove(Downloads.Impl.COLUMN_STATUS);
        }
        enforceAllowedValues(values, Downloads.Impl.COLUMN_DESTINATION,
                Downloads.Impl.DESTINATION_CACHE_PARTITION_PURGEABLE,
                Downloads.Impl.DESTINATION_FILE_URI,
                Downloads.Impl.DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD);
        if (getContext().checkCallingOrSelfPermission(Downloads.Impl.PERMISSION_NO_NOTIFICATION)
                == PackageManager.PERMISSION_GRANTED) {
            enforceAllowedValues(values, Downloads.Impl.COLUMN_VISIBILITY,
                    Request.VISIBILITY_HIDDEN,
                    Request.VISIBILITY_VISIBLE,
                    Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED,
                    Request.VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION);
        } else {
            enforceAllowedValues(values, Downloads.Impl.COLUMN_VISIBILITY,
                    Request.VISIBILITY_VISIBLE,
                    Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED,
                    Request.VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION);
        }
        // remove the rest of the columns that are allowed (with any value)
        values.remove(Downloads.Impl.COLUMN_URI);
        values.remove(Downloads.Impl.COLUMN_TITLE);
        values.remove(Downloads.Impl.COLUMN_DESCRIPTION);
        values.remove(Downloads.Impl.COLUMN_MIME_TYPE);
        values.remove(Downloads.Impl.COLUMN_FILE_NAME_HINT); // checked later in insert()
        values.remove(Downloads.Impl.COLUMN_NOTIFICATION_PACKAGE); // checked later in insert()
        values.remove(Downloads.Impl.COLUMN_ALLOWED_NETWORK_TYPES);
        values.remove(Downloads.Impl.COLUMN_ALLOW_ROAMING);
        values.remove(Downloads.Impl.COLUMN_ALLOW_METERED);
        values.remove(Downloads.Impl.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI);
        values.remove(Downloads.Impl.COLUMN_MEDIA_SCANNED);
        values.remove(Downloads.Impl.COLUMN_ALLOW_WRITE);
        Iterator<Map.Entry<String, Object>> iterator = values.valueSet().iterator();
        while (iterator.hasNext()) {
            String key = iterator.next().getKey();
            if (key.startsWith(Downloads.Impl.RequestHeaders.INSERT_KEY_PREFIX)) {
                iterator.remove();
            }
        }
        // any extra columns are extraneous and disallowed
        if (values.size() > 0) {
            StringBuilder error = new StringBuilder("Invalid columns in request: ");
            boolean first = true;
            for (Map.Entry<String, Object> entry : values.valueSet()) {
                if (!first) {
                    error.append(", ");
                }
                error.append(entry.getKey());
            }
            throw new SecurityException(error.toString());
        }
    }
    /**
     * Remove column from values, and throw a SecurityException if the value isn't within the
     * specified allowedValues.
     */
    private void enforceAllowedValues(ContentValues values, String column,
            Object... allowedValues) {
        Object value = values.get(column);
        values.remove(column);
        for (Object allowedValue : allowedValues) {
            if (value == null && allowedValue == null) {
                return;
            }
            if (value != null && value.equals(allowedValue)) {
                return;
            }
        }
        throw new SecurityException("Invalid value for " + column + ": " + value);
    }
http://www.apache.org/licenses/LICENSE-2.0
ANOKI<HTML>
<TITLE>HTML/
<TITLE>
<BODY>
THIS IS HTML!
</BODY>
</HTML>
33 21 00100001&##33;!
165 A5 10100101&#165;¥
122 7A 01111010&#122;2
35 23 00100011&#35;# NUMBER
HTML &33; EXCLAMATION MARK<<>>Aa€e√

0"fill it still"-
01"believer"-
02"Havana"-
03"shape of you"-
04"$tar boy"-
05"$omething just like you"-
06"I can't the stop the feeling"-
07"closer"-
08"one dance"-


langchain.retrievers.youhttps://ydc-index.us.auth0.com/u/reset-password?ticket=Cvy9S1ksyRCNwrMZDZphTG02QmqCnoOF#qa.run("how was the New York City pinball ban lifted?")
YOU.COMqa.runlangchain.chainsimport os

from langchain.retrievers.you import YouRetriever
from langchain.chains import RetrievalQA
from langchain.chat_models import ChatOpenAI


os.environ["YDC_API_KEY"] = "YOUR YOU.COM API KEY"
os.environ["OPENAI_API_KEY"] = "YOUR OPENAI API KEY"
yr = YouRetriever()
model = "gpt-3.5-turbo-16k"
qa = RetrievalQA.from_chain_type(llm=ChatOpenAI(model=model), chain_type="stuff", retriever=yr)
pip install openai langchain







 

















































































































































































10cf77c58b6d0174c9bce4bd8ac10e51cc4e41b8






















	
opencode@microsoft.com911https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.https://www.contributor-covenant.org/faq.https://www.contributor-covenant.org/translations., e.g., cat-2.png
### Image 3: <image>       % some image, e.g., cat-3.png
### Question: <question>   % What's the difference between the three cats?
### Answer: <answer>       % The colors of the three cats are different.
...
The training experience of DeepSpeed-VisualChat is straightforward and convenient. Here we give an example based on the CLIP visual encoder and the LLaMa-7B model:

git clone https://github.com/microsoft/DeepSpeedExamples.git
cd DeepSpeedExamples/applications/DeepSpeed-VisualChat/
pip install -r requirements.txt
cd training
bash training_scripts/run_7b.sh
The trained checkpoint will be automatically saved in a Hugging Face-compatible version and can be used to launch your own visual chat API:

cd ../chat
bash chat_scripts/run.sh # You need to change necessary variables, e.g, ckpt path
To support larger model inference, we have incorporated Hugging Face large model inference into our DeepSpeed-VisualChat API. Therefore, users can choose a different number of GPUs based on the GPU memory capacity and the model size.

Please refer to our GitHub Landing Page for more details.

7. Release: Try DeepSpeed-VisualChat today!
We are very excited to share that DeepSpeed-VisualChat is now open-sourced and available to the AI community.

To get started, please visit our GitHub page for DeepSpeed-VisualChat: GitHub Landing Page

We will continue to improve DeepSpeed-VisualChat with your feedback and support. Our roadmap shows currently supported features as well as ones that are planned for the future.

DeepSpeed-VisualChat is a component of the larger DeepSpeed ecosystem, which includes a range of Deep Learning systems and modeling technologies. To learn more,

Please visit our website for detailed blog posts, tutorials, and helpful documentation.
Follow us on our English X(Twitter), Japanese X(Twitter), and Chinese Zhihu for latest news on DeepSpeed.
We welcome your contributions to DeepSpeed! We encourage you to report issues, contribute PRs, and join discussions on the DeepSpeed GitHub page. Please see our contributing guide for more details. We are open to collaborations with universities, research labs, companies, such as those working together on deep learning research, applying DeepSpeed to empower real-world AI models and applications, and so on. For such requests (and other requests unsuitable for GitHub), please directly email to deepspeed-info@microsoft.com.

"Star" our DeepSpeed GitHub and DeepSpeedExamples GitHub cat-2.pngcat-3.pnghttps://github.com/microsoft/DeepSpeedExamples.gitrequirements.txt  title={{DeepSpeed-VisualChat: Multi-Round Multi-Image Interleave Chat via Multi-Modal Causal Attention}},
  author={Zhewei Yao and Xiaoxia Wu and Conglong Li and Minjia Zhang and Heyang Qin and Olatunji Ruwase and Ammar Ahmad Awan and Samyam Rajbhandari and Yuxiong He},
  journal={arXiv preprint arXiv:2309.14327},
  year={2023}
}
1. Overview
Large Language models (LLMs), such as GPT and LLaMa, have showcased exceptional prowess in a myriad of text generation and comprehension tasks, especially when subjected to zero-/few-shot learning, particularly after instructed fine-tuning. However, to equip AI agents for diverse tasks, one critical feature that needs to be incorporated is multi-modal capability; for instance, the AI agent should be able to read images, hear voices, watch videos, etc. This capability is largely absent in solely text-based LLMs.

Recently, one of the research/practice mainstreams has begun exploring the incorporation of visual capability into LLMs, especially enabling LLMs to understand images by inserting raw pictures (referred to as large visual language models, or LVLMs in short).

The main caveats of the majority of existing works are:

The focus is predominantly on tasks related to a single image, such as visual question answering and captioning, or on handling multiple images that require concurrent input. Neither approach adeptly manages interleaved image-and-text input.
The scalability of the system is limited to models with ~10B parameters, which is about an order of magnitude smaller than largest open-sourced models.
However, for a genuine AI chat agent, the content of inputs could be multiple images interleaved with text, a situation rarely addressed by current works. Also, the generation capability of LLMs grows quickly as the model size increases. Therefore, focusing system capability on ~10B models limits further exploration of the potential of LVLMs.

To resolve these issues, we are introducing DeepSpeed-VisualChat (see arxiv report for more details) with the following new features:

Fully Open-Sourced Multi-round Multi-image Framework with Unprecedented Scalability: DeepSpeed-VisualChat, one of the pioneering fully open-sourced frameworks, enables multi-round and multi-image dialogues, accommodating interleaved text-and-image inputs. We leverage DeepSpeed to enhance our training with a 2B visual encoder and a 70B LLaMA-2 decoder model, illustrating the remarkable scalability of our framework.
Multi-Modal Causal Attention (MMCA) We devise a novel MMCA for multi-modal models that computes attention weights independently across various modalities. MMCA achieves objectives analogous to conventional cross-attention mechanisms but offers enhanced causal attention interpretations for generative tasks, eliminating the need for additional modules or parameters. It also presents superior training data efficiency compared to standard causal attention.
Data Blending for Interleaved Inputs To facilitate conversations with interleaved modalities, DeepSpeed-VisualChat employs assorted data blending techniques on existing datasets, overcoming the shortage of interleaved text-and-image inputs in most available open-source datasets.
2 Model architecture overview
deepspeed-info@microsoft.com2kingdom hearts 
NVIM v0.10.0-dev-1801+g2ebd328a7
Build type: RelWithDebInfo
LuaJIT 2.1.1700008891https://t.me/+aO8Ohy2APNFkYzAx2.1.1700008891https://github.com/bradford80USA/unamed/issues/40#issue-2031872125gh pr checkout 9898[Jesus.txt](https://github.com/bradford80USA/unamed/files/13623472/Jesus.txt)
[Jesus main.txt](https://github.com/bradford80USA/unamed/files/13623471/Jesus.main.txt)
